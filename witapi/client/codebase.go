// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "wit": codebase Resource Client
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-wit/design
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-wit
// --version=v1.3.0

package client

import (
	"bytes"
	"context"
	"fmt"
	uuid "github.com/goadesign/goa/uuid"
	"net/http"
	"net/url"
)

// CheStartCodebasePath computes a request path to the cheStart action of codebase.
func CheStartCodebasePath() string {

	return fmt.Sprintf("/api/codebases/che/start")
}

// Start che server if not running.
func (c *Client) CheStartCodebase(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewCheStartCodebaseRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCheStartCodebaseRequest create the request corresponding to the cheStart action endpoint of the codebase resource.
func (c *Client) NewCheStartCodebaseRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PATCH", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// CheStateCodebasePath computes a request path to the cheState action of codebase.
func CheStateCodebasePath() string {

	return fmt.Sprintf("/api/codebases/che/state")
}

// Get che server state.
func (c *Client) CheStateCodebase(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewCheStateCodebaseRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCheStateCodebaseRequest create the request corresponding to the cheState action endpoint of the codebase resource.
func (c *Client) NewCheStateCodebaseRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// CreateCodebasePayload is the codebase create action payload.
type CreateCodebasePayload struct {
	Data *CreateWorkspaceData `form:"data" json:"data" xml:"data"`
}

// CreateCodebasePath computes a request path to the create action of codebase.
func CreateCodebasePath(codebaseID uuid.UUID) string {
	param0 := codebaseID.String()

	return fmt.Sprintf("/api/codebases/%s/create", param0)
}

// Trigger create a worksapce for a codebase.
func (c *Client) CreateCodebase(ctx context.Context, path string, payload *CreateCodebasePayload) (*http.Response, error) {
	req, err := c.NewCreateCodebaseRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateCodebaseRequest create the request corresponding to the create action endpoint of the codebase resource.
func (c *Client) NewCreateCodebaseRequest(ctx context.Context, path string, payload *CreateCodebasePayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// DeleteCodebasePath computes a request path to the delete action of codebase.
func DeleteCodebasePath(codebaseID uuid.UUID) string {
	param0 := codebaseID.String()

	return fmt.Sprintf("/api/codebases/%s", param0)
}

// Delete a codebase with the given ID.
func (c *Client) DeleteCodebase(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteCodebaseRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteCodebaseRequest create the request corresponding to the delete action endpoint of the codebase resource.
func (c *Client) NewDeleteCodebaseRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// EditCodebasePath computes a request path to the edit action of codebase.
func EditCodebasePath(codebaseID uuid.UUID) string {
	param0 := codebaseID.String()

	return fmt.Sprintf("/api/codebases/%s/edit", param0)
}

// Deprecated: Trigger edit of a given codebase.
func (c *Client) EditCodebase(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewEditCodebaseRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewEditCodebaseRequest create the request corresponding to the edit action endpoint of the codebase resource.
func (c *Client) NewEditCodebaseRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ListWorkspacesCodebasePath computes a request path to the listWorkspaces action of codebase.
func ListWorkspacesCodebasePath(codebaseID uuid.UUID) string {
	param0 := codebaseID.String()

	return fmt.Sprintf("/api/codebases/%s/workspaces", param0)
}

// Retrieve the list of workspaces that belong to a given codebase
func (c *Client) ListWorkspacesCodebase(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListWorkspacesCodebaseRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListWorkspacesCodebaseRequest create the request corresponding to the listWorkspaces action endpoint of the codebase resource.
func (c *Client) NewListWorkspacesCodebaseRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// OpenCodebasePath computes a request path to the open action of codebase.
func OpenCodebasePath(codebaseID uuid.UUID, workspaceID string) string {
	param0 := codebaseID.String()
	param1 := workspaceID

	return fmt.Sprintf("/api/codebases/%s/open/%s", param0, param1)
}

// Trigger open of a given worksapce for a codebase.
func (c *Client) OpenCodebase(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewOpenCodebaseRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewOpenCodebaseRequest create the request corresponding to the open action endpoint of the codebase resource.
func (c *Client) NewOpenCodebaseRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ShowCodebasePath computes a request path to the show action of codebase.
func ShowCodebasePath(codebaseID uuid.UUID) string {
	param0 := codebaseID.String()

	return fmt.Sprintf("/api/codebases/%s", param0)
}

// Retrieve codebase with given id.
func (c *Client) ShowCodebase(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowCodebaseRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowCodebaseRequest create the request corresponding to the show action endpoint of the codebase resource.
func (c *Client) NewShowCodebaseRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateCodebasePayload is the codebase update action payload.
type UpdateCodebasePayload struct {
	Data *Codebase `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// UpdateCodebasePath computes a request path to the update action of codebase.
func UpdateCodebasePath(codebaseID string) string {
	param0 := codebaseID

	return fmt.Sprintf("/api/codebases/%s", param0)
}

// Update a codebase with the given ID
func (c *Client) UpdateCodebase(ctx context.Context, path string, payload *UpdateCodebasePayload) (*http.Response, error) {
	req, err := c.NewUpdateCodebaseRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateCodebaseRequest create the request corresponding to the update action endpoint of the codebase resource.
func (c *Client) NewUpdateCodebaseRequest(ctx context.Context, path string, payload *UpdateCodebasePayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PATCH", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}
