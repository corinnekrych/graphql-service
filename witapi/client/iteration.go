// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "wit": iteration Resource Client
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-wit/design
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-wit
// --version=v1.3.0

package client

import (
	"bytes"
	"context"
	"fmt"
	uuid "github.com/goadesign/goa/uuid"
	"net/http"
	"net/url"
)

// CreateChildIterationPayload is the iteration create-child action payload.
type CreateChildIterationPayload struct {
	Data *Iteration `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// CreateChildIterationPath computes a request path to the create-child action of iteration.
func CreateChildIterationPath(iterationID string) string {
	param0 := iterationID

	return fmt.Sprintf("/api/iterations/%s", param0)
}

// create child iteration.
func (c *Client) CreateChildIteration(ctx context.Context, path string, payload *CreateChildIterationPayload) (*http.Response, error) {
	req, err := c.NewCreateChildIterationRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateChildIterationRequest create the request corresponding to the create-child action endpoint of the iteration resource.
func (c *Client) NewCreateChildIterationRequest(ctx context.Context, path string, payload *CreateChildIterationPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// DeleteIterationPath computes a request path to the delete action of iteration.
func DeleteIterationPath(iterationID uuid.UUID) string {
	param0 := iterationID.String()

	return fmt.Sprintf("/api/iterations/%s", param0)
}

// delete the iteration for the given id.
func (c *Client) DeleteIteration(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteIterationRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteIterationRequest create the request corresponding to the delete action endpoint of the iteration resource.
func (c *Client) NewDeleteIterationRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ShowIterationPath computes a request path to the show action of iteration.
func ShowIterationPath(iterationID string) string {
	param0 := iterationID

	return fmt.Sprintf("/api/iterations/%s", param0)
}

// Retrieve iteration with given id.
func (c *Client) ShowIteration(ctx context.Context, path string, ifModifiedSince *string, ifNoneMatch *string) (*http.Response, error) {
	req, err := c.NewShowIterationRequest(ctx, path, ifModifiedSince, ifNoneMatch)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowIterationRequest create the request corresponding to the show action endpoint of the iteration resource.
func (c *Client) NewShowIterationRequest(ctx context.Context, path string, ifModifiedSince *string, ifNoneMatch *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if ifModifiedSince != nil {

		header.Set("If-Modified-Since", *ifModifiedSince)
	}
	if ifNoneMatch != nil {

		header.Set("If-None-Match", *ifNoneMatch)
	}
	return req, nil
}

// UpdateIterationPayload is the iteration update action payload.
type UpdateIterationPayload struct {
	Data *Iteration `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// UpdateIterationPath computes a request path to the update action of iteration.
func UpdateIterationPath(iterationID string) string {
	param0 := iterationID

	return fmt.Sprintf("/api/iterations/%s", param0)
}

// update the iteration for the given id.
func (c *Client) UpdateIteration(ctx context.Context, path string, payload *UpdateIterationPayload) (*http.Response, error) {
	req, err := c.NewUpdateIterationRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateIterationRequest create the request corresponding to the update action endpoint of the iteration resource.
func (c *Client) NewUpdateIterationRequest(ctx context.Context, path string, payload *UpdateIterationPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PATCH", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}
