// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "wit": deployments Resource Client
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-wit/design
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-wit
// --version=v1.3.0

package client

import (
	"context"
	"fmt"
	uuid "github.com/goadesign/goa/uuid"
	"golang.org/x/net/websocket"
	"net/http"
	"net/url"
	"strconv"
)

// DeleteDeploymentDeploymentsPath computes a request path to the deleteDeployment action of deployments.
func DeleteDeploymentDeploymentsPath(spaceID uuid.UUID, appName string, deployName string) string {
	param0 := spaceID.String()
	param1 := appName
	param2 := deployName

	return fmt.Sprintf("/api/deployments/spaces/%s/applications/%s/deployments/%s", param0, param1, param2)
}

// Delete a deployment of an application
func (c *Client) DeleteDeploymentDeployments(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteDeploymentDeploymentsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteDeploymentDeploymentsRequest create the request corresponding to the deleteDeployment action endpoint of the deployments resource.
func (c *Client) NewDeleteDeploymentDeploymentsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// SetDeploymentDeploymentsPath computes a request path to the setDeployment action of deployments.
func SetDeploymentDeploymentsPath(spaceID uuid.UUID, appName string, deployName string) string {
	param0 := spaceID.String()
	param1 := appName
	param2 := deployName

	return fmt.Sprintf("/api/deployments/spaces/%s/applications/%s/deployments/%s", param0, param1, param2)
}

// set deployment pod count
func (c *Client) SetDeploymentDeployments(ctx context.Context, path string, podCount *int) (*http.Response, error) {
	req, err := c.NewSetDeploymentDeploymentsRequest(ctx, path, podCount)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewSetDeploymentDeploymentsRequest create the request corresponding to the setDeployment action endpoint of the deployments resource.
func (c *Client) NewSetDeploymentDeploymentsRequest(ctx context.Context, path string, podCount *int) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if podCount != nil {
		tmp129 := strconv.Itoa(*podCount)
		values.Set("podCount", tmp129)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ShowAllEnvironmentsDeploymentsPath computes a request path to the showAllEnvironments action of deployments.
func ShowAllEnvironmentsDeploymentsPath() string {

	return fmt.Sprintf("/api/deployments/environments")
}

// list all environments
func (c *Client) ShowAllEnvironmentsDeployments(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowAllEnvironmentsDeploymentsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowAllEnvironmentsDeploymentsRequest create the request corresponding to the showAllEnvironments action endpoint of the deployments resource.
func (c *Client) NewShowAllEnvironmentsDeploymentsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ShowDeploymentPodLimitRangeDeploymentsPath computes a request path to the showDeploymentPodLimitRange action of deployments.
func ShowDeploymentPodLimitRangeDeploymentsPath(spaceID uuid.UUID, appName string, deployName string) string {
	param0 := spaceID.String()
	param1 := appName
	param2 := deployName

	return fmt.Sprintf("/api/deployments/spaces/%s/applications/%s/deployments/%s/podlimits", param0, param1, param2)
}

// get pod resource limit range
func (c *Client) ShowDeploymentPodLimitRangeDeployments(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowDeploymentPodLimitRangeDeploymentsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowDeploymentPodLimitRangeDeploymentsRequest create the request corresponding to the showDeploymentPodLimitRange action endpoint of the deployments resource.
func (c *Client) NewShowDeploymentPodLimitRangeDeploymentsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ShowDeploymentStatSeriesDeploymentsPath computes a request path to the showDeploymentStatSeries action of deployments.
func ShowDeploymentStatSeriesDeploymentsPath(spaceID uuid.UUID, appName string, deployName string) string {
	param0 := spaceID.String()
	param1 := appName
	param2 := deployName

	return fmt.Sprintf("/api/deployments/spaces/%s/applications/%s/deployments/%s/statseries", param0, param1, param2)
}

// list deployment statistics
func (c *Client) ShowDeploymentStatSeriesDeployments(ctx context.Context, path string, end *float64, limit *int, start *float64) (*http.Response, error) {
	req, err := c.NewShowDeploymentStatSeriesDeploymentsRequest(ctx, path, end, limit, start)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowDeploymentStatSeriesDeploymentsRequest create the request corresponding to the showDeploymentStatSeries action endpoint of the deployments resource.
func (c *Client) NewShowDeploymentStatSeriesDeploymentsRequest(ctx context.Context, path string, end *float64, limit *int, start *float64) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if end != nil {
		tmp130 := strconv.FormatFloat(*end, 'f', -1, 64)
		values.Set("end", tmp130)
	}
	if limit != nil {
		tmp131 := strconv.Itoa(*limit)
		values.Set("limit", tmp131)
	}
	if start != nil {
		tmp132 := strconv.FormatFloat(*start, 'f', -1, 64)
		values.Set("start", tmp132)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ShowDeploymentStatsDeploymentsPath computes a request path to the showDeploymentStats action of deployments.
func ShowDeploymentStatsDeploymentsPath(spaceID uuid.UUID, appName string, deployName string) string {
	param0 := spaceID.String()
	param1 := appName
	param2 := deployName

	return fmt.Sprintf("/api/deployments/spaces/%s/applications/%s/deployments/%s/stats", param0, param1, param2)
}

// get deployment statistics
func (c *Client) ShowDeploymentStatsDeployments(ctx context.Context, path string, start *float64) (*http.Response, error) {
	req, err := c.NewShowDeploymentStatsDeploymentsRequest(ctx, path, start)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowDeploymentStatsDeploymentsRequest create the request corresponding to the showDeploymentStats action endpoint of the deployments resource.
func (c *Client) NewShowDeploymentStatsDeploymentsRequest(ctx context.Context, path string, start *float64) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if start != nil {
		tmp133 := strconv.FormatFloat(*start, 'f', -1, 64)
		values.Set("start", tmp133)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ShowEnvironmentsBySpaceDeploymentsPath computes a request path to the showEnvironmentsBySpace action of deployments.
func ShowEnvironmentsBySpaceDeploymentsPath(spaceID uuid.UUID) string {
	param0 := spaceID.String()

	return fmt.Sprintf("/api/deployments/environments/spaces/%s", param0)
}

// list all environments for a space and information for all others
func (c *Client) ShowEnvironmentsBySpaceDeployments(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowEnvironmentsBySpaceDeploymentsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowEnvironmentsBySpaceDeploymentsRequest create the request corresponding to the showEnvironmentsBySpace action endpoint of the deployments resource.
func (c *Client) NewShowEnvironmentsBySpaceDeploymentsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ShowSpaceDeploymentsPath computes a request path to the showSpace action of deployments.
func ShowSpaceDeploymentsPath(spaceID uuid.UUID) string {
	param0 := spaceID.String()

	return fmt.Sprintf("/api/deployments/spaces/%s", param0)
}

// list applications in a space
func (c *Client) ShowSpaceDeployments(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowSpaceDeploymentsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowSpaceDeploymentsRequest create the request corresponding to the showSpace action endpoint of the deployments resource.
func (c *Client) NewShowSpaceDeploymentsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ShowSpaceEnvironmentsDeploymentsPath computes a request path to the showSpaceEnvironments action of deployments.
func ShowSpaceEnvironmentsDeploymentsPath(spaceID uuid.UUID) string {
	param0 := spaceID.String()

	return fmt.Sprintf("/api/deployments/spaces/%s/environments", param0)
}

// DEPRECATED: please use /environments/spaces/:spaceID instead
func (c *Client) ShowSpaceEnvironmentsDeployments(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowSpaceEnvironmentsDeploymentsRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowSpaceEnvironmentsDeploymentsRequest create the request corresponding to the showSpaceEnvironments action endpoint of the deployments resource.
func (c *Client) NewShowSpaceEnvironmentsDeploymentsRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// WatchEnvironmentEventsDeploymentsPath computes a request path to the watchEnvironmentEvents action of deployments.
func WatchEnvironmentEventsDeploymentsPath(envName string) string {
	param0 := envName

	return fmt.Sprintf("/api/deployments/environments/%s/events/watch", param0)
}

// watch events for an environment
func (c *Client) WatchEnvironmentEventsDeployments(ctx context.Context, path string) (*websocket.Conn, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "wss"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	url_ := u.String()
	cfg, err := websocket.NewConfig(url_, url_)
	if err != nil {
		return nil, err
	}
	return websocket.DialConfig(cfg)
}
