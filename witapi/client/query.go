// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "wit": query Resource Client
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-wit/design
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-wit
// --version=v1.3.0

package client

import (
	"bytes"
	"context"
	"fmt"
	uuid "github.com/goadesign/goa/uuid"
	"net/http"
	"net/url"
)

// CreateQueryPayload is the query create action payload.
type CreateQueryPayload struct {
	Data *Query `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// CreateQueryPath computes a request path to the create action of query.
func CreateQueryPath(spaceID uuid.UUID) string {
	param0 := spaceID.String()

	return fmt.Sprintf("/api/spaces/%s/queries", param0)
}

// create query with id, title and fields.
func (c *Client) CreateQuery(ctx context.Context, path string, payload *CreateQueryPayload) (*http.Response, error) {
	req, err := c.NewCreateQueryRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateQueryRequest create the request corresponding to the create action endpoint of the query resource.
func (c *Client) NewCreateQueryRequest(ctx context.Context, path string, payload *CreateQueryPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// DeleteQueryPath computes a request path to the delete action of query.
func DeleteQueryPath(spaceID uuid.UUID, queryID uuid.UUID) string {
	param0 := spaceID.String()
	param1 := queryID.String()

	return fmt.Sprintf("/api/spaces/%s/queries/%s", param0, param1)
}

// Delete a query with the given ID.
func (c *Client) DeleteQuery(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteQueryRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteQueryRequest create the request corresponding to the delete action endpoint of the query resource.
func (c *Client) NewDeleteQueryRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ListQueryPath computes a request path to the list action of query.
func ListQueryPath(spaceID uuid.UUID) string {
	param0 := spaceID.String()

	return fmt.Sprintf("/api/spaces/%s/queries", param0)
}

// List queries.
func (c *Client) ListQuery(ctx context.Context, path string, ifModifiedSince *string, ifNoneMatch *string) (*http.Response, error) {
	req, err := c.NewListQueryRequest(ctx, path, ifModifiedSince, ifNoneMatch)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListQueryRequest create the request corresponding to the list action endpoint of the query resource.
func (c *Client) NewListQueryRequest(ctx context.Context, path string, ifModifiedSince *string, ifNoneMatch *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if ifModifiedSince != nil {

		header.Set("If-Modified-Since", *ifModifiedSince)
	}
	if ifNoneMatch != nil {

		header.Set("If-None-Match", *ifNoneMatch)
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ShowQueryPath computes a request path to the show action of query.
func ShowQueryPath(spaceID uuid.UUID, queryID uuid.UUID) string {
	param0 := spaceID.String()
	param1 := queryID.String()

	return fmt.Sprintf("/api/spaces/%s/queries/%s", param0, param1)
}

// Retrieve query for the given id.
func (c *Client) ShowQuery(ctx context.Context, path string, ifModifiedSince *string, ifNoneMatch *string) (*http.Response, error) {
	req, err := c.NewShowQueryRequest(ctx, path, ifModifiedSince, ifNoneMatch)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowQueryRequest create the request corresponding to the show action endpoint of the query resource.
func (c *Client) NewShowQueryRequest(ctx context.Context, path string, ifModifiedSince *string, ifNoneMatch *string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if ifModifiedSince != nil {

		header.Set("If-Modified-Since", *ifModifiedSince)
	}
	if ifNoneMatch != nil {

		header.Set("If-None-Match", *ifNoneMatch)
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// UpdateQueryPayload is the query update action payload.
type UpdateQueryPayload struct {
	Data *Query `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// UpdateQueryPath computes a request path to the update action of query.
func UpdateQueryPath(spaceID uuid.UUID, queryID uuid.UUID) string {
	param0 := spaceID.String()
	param1 := queryID.String()

	return fmt.Sprintf("/api/spaces/%s/queries/%s", param0, param1)
}

// Update the query for the given id.
func (c *Client) UpdateQuery(ctx context.Context, path string, payload *UpdateQueryPayload, ifModifiedSince *string, ifNoneMatch *string) (*http.Response, error) {
	req, err := c.NewUpdateQueryRequest(ctx, path, payload, ifModifiedSince, ifNoneMatch)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateQueryRequest create the request corresponding to the update action endpoint of the query resource.
func (c *Client) NewUpdateQueryRequest(ctx context.Context, path string, payload *UpdateQueryPayload, ifModifiedSince *string, ifNoneMatch *string) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PATCH", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if ifModifiedSince != nil {

		header.Set("If-Modified-Since", *ifModifiedSince)
	}
	if ifNoneMatch != nil {

		header.Set("If-None-Match", *ifNoneMatch)
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}
