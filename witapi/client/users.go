// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "wit": users Resource Client
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-wit/design
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-wit
// --version=v1.3.0

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// CreateUserAsServiceAccountUsersPayload is the users createUserAsServiceAccount action payload.
type CreateUserAsServiceAccountUsersPayload struct {
	Data *CreateUserData `form:"data" json:"data" xml:"data"`
}

// CreateUserAsServiceAccountUsersPath computes a request path to the createUserAsServiceAccount action of users.
func CreateUserAsServiceAccountUsersPath(id string) string {
	param0 := id

	return fmt.Sprintf("/api/users/%s", param0)
}

// create a user using a service account
func (c *Client) CreateUserAsServiceAccountUsers(ctx context.Context, path string, payload *CreateUserAsServiceAccountUsersPayload) (*http.Response, error) {
	req, err := c.NewCreateUserAsServiceAccountUsersRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateUserAsServiceAccountUsersRequest create the request corresponding to the createUserAsServiceAccount action endpoint of the users resource.
func (c *Client) NewCreateUserAsServiceAccountUsersRequest(ctx context.Context, path string, payload *CreateUserAsServiceAccountUsersPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ListUsersPath computes a request path to the list action of users.
func ListUsersPath() string {

	return fmt.Sprintf("/api/users")
}

// List all users.
func (c *Client) ListUsers(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListUsersRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListUsersRequest create the request corresponding to the list action endpoint of the users resource.
func (c *Client) NewListUsersRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowUsersPath computes a request path to the show action of users.
func ShowUsersPath(id string) string {
	param0 := id

	return fmt.Sprintf("/api/users/%s", param0)
}

// Retrieve user for the given ID.
func (c *Client) ShowUsers(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowUsersRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowUsersRequest create the request corresponding to the show action endpoint of the users resource.
func (c *Client) NewShowUsersRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateUsersPath computes a request path to the update action of users.
func UpdateUsersPath() string {

	return fmt.Sprintf("/api/users")
}

// update the authenticated user
func (c *Client) UpdateUsers(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewUpdateUsersRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateUsersRequest create the request corresponding to the update action endpoint of the users resource.
func (c *Client) NewUpdateUsersRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PATCH", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// UpdateUserAsServiceAccountUsersPayload is the users updateUserAsServiceAccount action payload.
type UpdateUserAsServiceAccountUsersPayload struct {
	Data *UpdateUserData `form:"data" json:"data" xml:"data"`
}

// UpdateUserAsServiceAccountUsersPath computes a request path to the updateUserAsServiceAccount action of users.
func UpdateUserAsServiceAccountUsersPath(id string) string {
	param0 := id

	return fmt.Sprintf("/api/users/%s", param0)
}

// update a user using a service account
func (c *Client) UpdateUserAsServiceAccountUsers(ctx context.Context, path string, payload *UpdateUserAsServiceAccountUsersPayload) (*http.Response, error) {
	req, err := c.NewUpdateUserAsServiceAccountUsersRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateUserAsServiceAccountUsersRequest create the request corresponding to the updateUserAsServiceAccount action endpoint of the users resource.
func (c *Client) NewUpdateUserAsServiceAccountUsersRequest(ctx context.Context, path string, payload *UpdateUserAsServiceAccountUsersPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PATCH", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}
