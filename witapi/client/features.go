// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "wit": features Resource Client
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-wit/design
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-wit
// --version=v1.3.0

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// ListFeaturesPath computes a request path to the list action of features.
func ListFeaturesPath() string {

	return fmt.Sprintf("/api/features")
}

// Show a list of features enabled.
func (c *Client) ListFeatures(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListFeaturesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListFeaturesRequest create the request corresponding to the list action endpoint of the features resource.
func (c *Client) NewListFeaturesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ShowFeaturesPath computes a request path to the show action of features.
func ShowFeaturesPath(featureName string) string {
	param0 := featureName

	return fmt.Sprintf("/api/features/%s", param0)
}

// Show feature details.
func (c *Client) ShowFeatures(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowFeaturesRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowFeaturesRequest create the request corresponding to the show action endpoint of the features resource.
func (c *Client) NewShowFeaturesRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}
