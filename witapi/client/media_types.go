// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "wit": Application Media Types
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-wit/design
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-wit
// --version=v1.3.0

package client

import (
	"github.com/goadesign/goa"
	uuid "github.com/goadesign/goa/uuid"
	"net/http"
)

// Holds a single Area (default view)
//
// Identifier: application/vnd.area+json; view=default
type AreaSingle struct {
	Data *Area `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the AreaSingle media type instance.
func (mt *AreaSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeAreaSingle decodes the AreaSingle instance encoded in resp body.
func (c *Client) DecodeAreaSingle(resp *http.Response) (*AreaSingle, error) {
	var decoded AreaSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the list of Areas (default view)
//
// Identifier: application/vnd.arealist+json; view=default
type AreaList struct {
	Data []*Area `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}             `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *PagingLinks              `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	Meta     *WorkItemListResponseMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the AreaList media type instance.
func (mt *AreaList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeAreaList decodes the AreaList instance encoded in resp body.
func (c *Client) DecodeAreaList(resp *http.Response) (*AreaList, error) {
	var decoded AreaList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// JWT Token (default view)
//
// Identifier: application/vnd.authtoken+json; view=default
type AuthToken struct {
	Token *TokenData `form:"token" json:"token" xml:"token"`
}

// Validate validates the AuthToken media type instance.
func (mt *AuthToken) Validate() (err error) {
	if mt.Token == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "token"))
	}
	return
}

// DecodeAuthToken decodes the AuthToken instance encoded in resp body.
func (c *Client) DecodeAuthToken(resp *http.Response) (*AuthToken, error) {
	var decoded AuthToken
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// AuthTokenCollection is the media type for an array of AuthToken (default view)
//
// Identifier: application/vnd.authtoken+json; type=collection; view=default
type AuthTokenCollection []*AuthToken

// Validate validates the AuthTokenCollection media type instance.
func (mt AuthTokenCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeAuthTokenCollection decodes the AuthTokenCollection instance encoded in resp body.
func (c *Client) DecodeAuthTokenCollection(resp *http.Response) (AuthTokenCollection, error) {
	var decoded AuthTokenCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// Holds a single codebase (default view)
//
// Identifier: application/vnd.codebase+json; view=default
type CodebaseSingle struct {
	Data *Codebase `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the CodebaseSingle media type instance.
func (mt *CodebaseSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeCodebaseSingle decodes the CodebaseSingle instance encoded in resp body.
func (c *Client) DecodeCodebaseSingle(resp *http.Response) (*CodebaseSingle, error) {
	var decoded CodebaseSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the list of codebases (default view)
//
// Identifier: application/vnd.codebaselist+json; view=default
type CodebaseList struct {
	Data []*Codebase `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}     `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *PagingLinks      `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	Meta     *CodebaseListMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the CodebaseList media type instance.
func (mt *CodebaseList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeCodebaseList decodes the CodebaseList instance encoded in resp body.
func (c *Client) DecodeCodebaseList(resp *http.Response) (*CodebaseList, error) {
	var decoded CodebaseList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the response of a single comment (default view)
//
// Identifier: application/vnd.comment+json; view=default
type CommentSingle struct {
	Data *Comment `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the CommentSingle media type instance.
func (mt *CommentSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeCommentSingle decodes the CommentSingle instance encoded in resp body.
func (c *Client) DecodeCommentSingle(resp *http.Response) (*CommentSingle, error) {
	var decoded CommentSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the response of comments (default view)
//
// Identifier: application/vnd.commentlist+json; view=default
type CommentList struct {
	Data []*Comment `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}    `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *PagingLinks     `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	Meta     *CommentListMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the CommentList media type instance.
func (mt *CommentList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeCommentList decodes the CommentList instance encoded in resp body.
func (c *Client) DecodeCommentList(resp *http.Response) (*CommentList, error) {
	var decoded CommentList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the response of comments (default view)
//
// Identifier: application/vnd.commentrelationshiplist+json; view=default
type CommentRelationshipList struct {
	Data []*Comment `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}    `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *GenericLinks    `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	Meta     *CommentListMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the CommentRelationshipList media type instance.
func (mt *CommentRelationshipList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeCommentRelationshipList decodes the CommentRelationshipList instance encoded in resp body.
func (c *Client) DecodeCommentRelationshipList(resp *http.Response) (*CommentRelationshipList, error) {
	var decoded CommentRelationshipList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the create data for a comment (default view)
//
// Identifier: application/vnd.createsingle+json; view=default
type CreateSingleSingle struct {
	Data *CreateComment `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the CreateSingleSingle media type instance.
func (mt *CreateSingleSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeCreateSingleSingle decodes the CreateSingleSingle instance encoded in resp body.
func (c *Client) DecodeCreateSingleSingle(resp *http.Response) (*CreateSingleSingle, error) {
	var decoded CreateSingleSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// WIT User Create (default view)
//
// Identifier: application/vnd.createuser+json; view=default
type CreateUser struct {
	Data *CreateUserData `form:"data" json:"data" xml:"data"`
}

// Validate validates the CreateUser media type instance.
func (mt *CreateUser) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeCreateUser decodes the CreateUser instance encoded in resp body.
func (c *Client) DecodeCreateUser(resp *http.Response) (*CreateUser, error) {
	var decoded CreateUser
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Create Workspace (default view)
//
// Identifier: application/vnd.createworkspace+json; view=default
type CreateWorkspace struct {
	Data *CreateWorkspaceData `form:"data" json:"data" xml:"data"`
}

// Validate validates the CreateWorkspace media type instance.
func (mt *CreateWorkspace) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	return
}

// DecodeCreateWorkspace decodes the CreateWorkspace instance encoded in resp body.
func (c *Client) DecodeCreateWorkspace(resp *http.Response) (*CreateWorkspace, error) {
	var decoded CreateWorkspace
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Contains endpoints (default view)
//
// Identifier: application/vnd.endpoint+json; view=default
type EndpointSingle struct {
	Data *Endpoints `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the EndpointSingle media type instance.
func (mt *EndpointSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeEndpointSingle decodes the EndpointSingle instance encoded in resp body.
func (c *Client) DecodeEndpointSingle(resp *http.Response) (*EndpointSingle, error) {
	var decoded EndpointSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds a single Event (default view)
//
// Identifier: application/vnd.event+json; view=default
type EventSingle struct {
	Data *Event `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the EventSingle media type instance.
func (mt *EventSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeEventSingle decodes the EventSingle instance encoded in resp body.
func (c *Client) DecodeEventSingle(resp *http.Response) (*EventSingle, error) {
	var decoded EventSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the response of events (default view)
//
// Identifier: application/vnd.eventlist+json; view=default
type EventList struct {
	Data []*Event `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the EventList media type instance.
func (mt *EventList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeEventList decodes the EventList instance encoded in resp body.
func (c *Client) DecodeEventList(resp *http.Response) (*EventList, error) {
	var decoded EventList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds filter information (default view)
//
// Identifier: application/vnd.filter+json; view=default
type FilterSingle struct {
	Data *Filters `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the FilterSingle media type instance.
func (mt *FilterSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeFilterSingle decodes the FilterSingle instance encoded in resp body.
func (c *Client) DecodeFilterSingle(resp *http.Response) (*FilterSingle, error) {
	var decoded FilterSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the list of Filters (default view)
//
// Identifier: application/vnd.filterlist+json; view=default
type FilterList struct {
	Data []*Filters `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}             `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *PagingLinks              `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	Meta     *WorkItemListResponseMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the FilterList media type instance.
func (mt *FilterList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeFilterList decodes the FilterList instance encoded in resp body.
func (c *Client) DecodeFilterList(resp *http.Response) (*FilterList, error) {
	var decoded FilterList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// DecodeErrorResponse decodes the ErrorResponse instance encoded in resp body.
func (c *Client) DecodeErrorResponse(resp *http.Response) (*goa.ErrorResponse, error) {
	var decoded goa.ErrorResponse
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the list of iterations (default view)
//
// Identifier: application/vnd.iteration+json; view=default
type IterationSingle struct {
	Data *Iteration `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the IterationSingle media type instance.
func (mt *IterationSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeIterationSingle decodes the IterationSingle instance encoded in resp body.
func (c *Client) DecodeIterationSingle(resp *http.Response) (*IterationSingle, error) {
	var decoded IterationSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the list of iterations (default view)
//
// Identifier: application/vnd.iterationlist+json; view=default
type IterationList struct {
	Data []*Iteration `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}             `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *PagingLinks              `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	Meta     *WorkItemListResponseMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the IterationList media type instance.
func (mt *IterationList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeIterationList decodes the IterationList instance encoded in resp body.
func (c *Client) DecodeIterationList(resp *http.Response) (*IterationList, error) {
	var decoded IterationList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// JSONAPIErrors media type (default view)
//
// Identifier: application/vnd.jsonapierrors+json; view=default
type JSONAPIErrors struct {
	Errors []*JSONAPIError `form:"errors" json:"errors" xml:"errors"`
}

// Validate validates the JSONAPIErrors media type instance.
func (mt *JSONAPIErrors) Validate() (err error) {
	if mt.Errors == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "errors"))
	}
	for _, e := range mt.Errors {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeJSONAPIErrors decodes the JSONAPIErrors instance encoded in resp body.
func (c *Client) DecodeJSONAPIErrors(resp *http.Response) (*JSONAPIErrors, error) {
	var decoded JSONAPIErrors
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds a single Label (default view)
//
// Identifier: application/vnd.label+json; view=default
type LabelSingle struct {
	Data *Label `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the LabelSingle media type instance.
func (mt *LabelSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeLabelSingle decodes the LabelSingle instance encoded in resp body.
func (c *Client) DecodeLabelSingle(resp *http.Response) (*LabelSingle, error) {
	var decoded LabelSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the list of Labels (default view)
//
// Identifier: application/vnd.labellist+json; view=default
type LabelList struct {
	Data []*Label `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}             `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *PagingLinks              `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	Meta     *WorkItemListResponseMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the LabelList media type instance.
func (mt *LabelList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeLabelList decodes the LabelList instance encoded in resp body.
func (c *Client) DecodeLabelList(resp *http.Response) (*LabelList, error) {
	var decoded LabelList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// MarkupRenderingMediaType contains the
// 		rendering of the 'content' provided in the request, using
// 		the markup language specified by the 'markup' value. (default view)
//
// Identifier: application/vnd.markuprendering+json; view=default
type MarkupRenderingSingle struct {
	Data *MarkupRenderingData `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the MarkupRenderingSingle media type instance.
func (mt *MarkupRenderingSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeMarkupRenderingSingle decodes the MarkupRenderingSingle instance encoded in resp body.
func (c *Client) DecodeMarkupRenderingSingle(resp *http.Response) (*MarkupRenderingSingle, error) {
	var decoded MarkupRenderingSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds a single query (default view)
//
// Identifier: application/vnd.query+json; view=default
type QuerySingle struct {
	Data *Query `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the QuerySingle media type instance.
func (mt *QuerySingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeQuerySingle decodes the QuerySingle instance encoded in resp body.
func (c *Client) DecodeQuerySingle(resp *http.Response) (*QuerySingle, error) {
	var decoded QuerySingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the list of queries (default view)
//
// Identifier: application/vnd.querylist+json; view=default
type QueryList struct {
	Data []*Query `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}             `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *PagingLinks              `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	Meta     *WorkItemListResponseMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the QueryList media type instance.
func (mt *QueryList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeQueryList decodes the QueryList instance encoded in resp body.
func (c *Client) DecodeQueryList(resp *http.Response) (*QueryList, error) {
	var decoded QueryList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the paginated response to a search for spaces request (default view)
//
// Identifier: application/vnd.searchspacelist+json; view=default
type SearchSpaceList struct {
	Data []*Space `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}  `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *PagingLinks   `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	Meta     *SpaceListMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the SearchSpaceList media type instance.
func (mt *SearchSpaceList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeSearchSpaceList decodes the SearchSpaceList instance encoded in resp body.
func (c *Client) DecodeSearchSpaceList(resp *http.Response) (*SearchSpaceList, error) {
	var decoded SearchSpaceList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the paginated response to a search request (default view)
//
// Identifier: application/vnd.searchworkitemlist+json; view=default
type SearchWorkItemList struct {
	Data []*WorkItem `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}             `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *PagingLinks              `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	Meta     *WorkItemListResponseMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the SearchWorkItemList media type instance.
func (mt *SearchWorkItemList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeSearchWorkItemList decodes the SearchWorkItemList instance encoded in resp body.
func (c *Client) DecodeSearchWorkItemList(resp *http.Response) (*SearchWorkItemList, error) {
	var decoded SearchWorkItemList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds a response to a pod limit range query (default view)
//
// Identifier: application/vnd.simpledeploymentpodlimitrange+json; view=default
type SimpleDeploymentPodLimitRangeSingle struct {
	Data *SimpleDeploymentPodLimitRange `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the SimpleDeploymentPodLimitRangeSingle media type instance.
func (mt *SimpleDeploymentPodLimitRangeSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	return
}

// DecodeSimpleDeploymentPodLimitRangeSingle decodes the SimpleDeploymentPodLimitRangeSingle instance encoded in resp body.
func (c *Client) DecodeSimpleDeploymentPodLimitRangeSingle(resp *http.Response) (*SimpleDeploymentPodLimitRangeSingle, error) {
	var decoded SimpleDeploymentPodLimitRangeSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds a single response to a space/application/deployment/stats request (default view)
//
// Identifier: application/vnd.simpledeploymentstats+json; view=default
type SimpleDeploymentStatsSingle struct {
	Data *SimpleDeploymentStats `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the SimpleDeploymentStatsSingle media type instance.
func (mt *SimpleDeploymentStatsSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeSimpleDeploymentStatsSingle decodes the SimpleDeploymentStatsSingle instance encoded in resp body.
func (c *Client) DecodeSimpleDeploymentStatsSingle(resp *http.Response) (*SimpleDeploymentStatsSingle, error) {
	var decoded SimpleDeploymentStatsSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds a response to a stat series query (default view)
//
// Identifier: application/vnd.simpledeploymentstatseries+json; view=default
type SimpleDeploymentStatSeriesSingle struct {
	Data *SimpleDeploymentStatSeries `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the SimpleDeploymentStatSeriesSingle media type instance.
func (mt *SimpleDeploymentStatSeriesSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	return
}

// DecodeSimpleDeploymentStatSeriesSingle decodes the SimpleDeploymentStatSeriesSingle instance encoded in resp body.
func (c *Client) DecodeSimpleDeploymentStatSeriesSingle(resp *http.Response) (*SimpleDeploymentStatSeriesSingle, error) {
	var decoded SimpleDeploymentStatSeriesSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds a response to a environment request (default view)
//
// Identifier: application/vnd.simpleenvironmentlist+json; view=default
type SimpleEnvironmentList struct {
	Data []*SimpleEnvironment `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the SimpleEnvironmentList media type instance.
func (mt *SimpleEnvironmentList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeSimpleEnvironmentList decodes the SimpleEnvironmentList instance encoded in resp body.
func (c *Client) DecodeSimpleEnvironmentList(resp *http.Response) (*SimpleEnvironmentList, error) {
	var decoded SimpleEnvironmentList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds a single response to a space request (default view)
//
// Identifier: application/vnd.simplespace+json; view=default
type SimpleSpaceSingle struct {
	Data *SimpleSpace `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the SimpleSpaceSingle media type instance.
func (mt *SimpleSpaceSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeSimpleSpaceSingle decodes the SimpleSpaceSingle instance encoded in resp body.
func (c *Client) DecodeSimpleSpaceSingle(resp *http.Response) (*SimpleSpaceSingle, error) {
	var decoded SimpleSpaceSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds a single response to a space request (default view)
//
// Identifier: application/vnd.space+json; view=default
type SpaceSingle struct {
	Data *Space `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the SpaceSingle media type instance.
func (mt *SpaceSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeSpaceSingle decodes the SpaceSingle instance encoded in resp body.
func (c *Client) DecodeSpaceSingle(resp *http.Response) (*SpaceSingle, error) {
	var decoded SpaceSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds a response to environment usage for a space compared to other spaces (default view)
//
// Identifier: application/vnd.spaceandotherenvironmentusagelist+json; view=default
type SpaceAndOtherEnvironmentUsageList struct {
	Data []*SpaceAndOtherEnvironmentUsage `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the SpaceAndOtherEnvironmentUsageList media type instance.
func (mt *SpaceAndOtherEnvironmentUsageList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeSpaceAndOtherEnvironmentUsageList decodes the SpaceAndOtherEnvironmentUsageList instance encoded in resp body.
func (c *Client) DecodeSpaceAndOtherEnvironmentUsageList(resp *http.Response) (*SpaceAndOtherEnvironmentUsageList, error) {
	var decoded SpaceAndOtherEnvironmentUsageList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the paginated response to a space list request (default view)
//
// Identifier: application/vnd.spacelist+json; view=default
type SpaceList struct {
	Data []*Space `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}  `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *PagingLinks   `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	Meta     *SpaceListMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the SpaceList media type instance.
func (mt *SpaceList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeSpaceList decodes the SpaceList instance encoded in resp body.
func (c *Client) DecodeSpaceList(resp *http.Response) (*SpaceList, error) {
	var decoded SpaceList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds a single space template (default view)
//
// Identifier: application/vnd.spacetemplate+json; view=default
type SpaceTemplateSingle struct {
	Data *SpaceTemplate `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the SpaceTemplateSingle media type instance.
func (mt *SpaceTemplateSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeSpaceTemplateSingle decodes the SpaceTemplateSingle instance encoded in resp body.
func (c *Client) DecodeSpaceTemplateSingle(resp *http.Response) (*SpaceTemplateSingle, error) {
	var decoded SpaceTemplateSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the list of space templates (default view)
//
// Identifier: application/vnd.spacetemplatelist+json; view=default
type SpaceTemplateList struct {
	Data []*SpaceTemplate `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}             `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *PagingLinks              `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	Meta     *WorkItemListResponseMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the SpaceTemplateList media type instance.
func (mt *SpaceTemplateList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeSpaceTemplateList decodes the SpaceTemplateList instance encoded in resp body.
func (c *Client) DecodeSpaceTemplateList(resp *http.Response) (*SpaceTemplateList, error) {
	var decoded SpaceTemplateList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// The status of the current running instance (default view)
//
// Identifier: application/vnd.status+json; view=default
type Status struct {
	// The time when built
	BuildTime string `form:"buildTime" json:"buildTime" xml:"buildTime"`
	// Commit SHA this build is based on
	Commit string `form:"commit" json:"commit" xml:"commit"`
	// The error if any
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// The time when started
	StartTime string `form:"startTime" json:"startTime" xml:"startTime"`
}

// Validate validates the Status media type instance.
func (mt *Status) Validate() (err error) {
	if mt.Commit == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "commit"))
	}
	if mt.BuildTime == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "buildTime"))
	}
	if mt.StartTime == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "startTime"))
	}
	return
}

// DecodeStatus decodes the Status instance encoded in resp body.
func (c *Client) DecodeStatus(resp *http.Response) (*Status, error) {
	var decoded Status
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds a single Tracker (default view)
//
// Identifier: application/vnd.tracker+json; view=default
type TrackerSingle struct {
	Data *Tracker `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the TrackerSingle media type instance.
func (mt *TrackerSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeTrackerSingle decodes the TrackerSingle instance encoded in resp body.
func (c *Client) DecodeTrackerSingle(resp *http.Response) (*TrackerSingle, error) {
	var decoded TrackerSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the list of Trackers (default view)
//
// Identifier: application/vnd.trackerlist+json; view=default
type TrackerList struct {
	Data []*Tracker `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}             `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *PagingLinks              `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	Meta     *WorkItemListResponseMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the TrackerList media type instance.
func (mt *TrackerList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeTrackerList decodes the TrackerList instance encoded in resp body.
func (c *Client) DecodeTrackerList(resp *http.Response) (*TrackerList, error) {
	var decoded TrackerList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Tracker query with schedule (default view)
//
// Identifier: application/vnd.trackerquery+json; view=default
type TrackerQuery struct {
	// unique id per installation
	ID string `form:"id" json:"id" xml:"id"`
	// Search query
	Query         string                     `form:"query" json:"query" xml:"query"`
	Relationships *TrackerQueryRelationships `form:"relationships" json:"relationships" xml:"relationships"`
	// Schedule for fetch and import
	Schedule string `form:"schedule" json:"schedule" xml:"schedule"`
	// Tracker ID
	TrackerID uuid.UUID `form:"trackerID" json:"trackerID" xml:"trackerID"`
}

// Validate validates the TrackerQuery media type instance.
func (mt *TrackerQuery) Validate() (err error) {
	if mt.ID == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "id"))
	}
	if mt.Query == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "query"))
	}
	if mt.Schedule == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "schedule"))
	}

	if mt.Relationships == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "relationships"))
	}
	if mt.Relationships != nil {
		if err2 := mt.Relationships.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeTrackerQuery decodes the TrackerQuery instance encoded in resp body.
func (c *Client) DecodeTrackerQuery(resp *http.Response) (*TrackerQuery, error) {
	var decoded TrackerQuery
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// TrackerQueryCollection is the media type for an array of TrackerQuery (default view)
//
// Identifier: application/vnd.trackerquery+json; type=collection; view=default
type TrackerQueryCollection []*TrackerQuery

// Validate validates the TrackerQueryCollection media type instance.
func (mt TrackerQueryCollection) Validate() (err error) {
	for _, e := range mt {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeTrackerQueryCollection decodes the TrackerQueryCollection instance encoded in resp body.
func (c *Client) DecodeTrackerQueryCollection(resp *http.Response) (TrackerQueryCollection, error) {
	var decoded TrackerQueryCollection
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return decoded, err
}

// WIT User Update (default view)
//
// Identifier: application/vnd.updateuser+json; view=default
type UpdateUser struct {
	Data *UpdateUserData `form:"data" json:"data" xml:"data"`
}

// Validate validates the UpdateUser media type instance.
func (mt *UpdateUser) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeUpdateUser decodes the UpdateUser instance encoded in resp body.
func (c *Client) DecodeUpdateUser(resp *http.Response) (*UpdateUser, error) {
	var decoded UpdateUser
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// WIT User Identity (default view)
//
// Identifier: application/vnd.user+json; view=default
type User struct {
	Data *UserData `form:"data" json:"data" xml:"data"`
}

// Validate validates the User media type instance.
func (mt *User) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeUser decodes the User instance encoded in resp body.
func (c *Client) DecodeUser(resp *http.Response) (*User, error) {
	var decoded User
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds a single Tenant (default view)
//
// Identifier: application/vnd.userservice+json; view=default
type UserServiceSingle struct {
	Data *UserService `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate validates the UserServiceSingle media type instance.
func (mt *UserServiceSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeUserServiceSingle decodes the UserServiceSingle instance encoded in resp body.
func (c *Client) DecodeUserServiceSingle(resp *http.Response) (*UserServiceSingle, error) {
	var decoded UserServiceSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the paginated response to a user spaces request (default view)
//
// Identifier: application/vnd.userspaceslist+json; view=default
type UserSpacesList struct {
	Data []*UserSpacesData `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}       `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *PagingLinks        `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	Meta     *UserSpacesListMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the UserSpacesList media type instance.
func (mt *UserSpacesList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeUserSpacesList decodes the UserSpacesList instance encoded in resp body.
func (c *Client) DecodeUserSpacesList(resp *http.Response) (*UserSpacesList, error) {
	var decoded UserSpacesList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// A work item holds field values according to a given field type in JSONAPI form (default view)
//
// Identifier: application/vnd.workitem+json; view=default
type WorkItemSingle struct {
	Data *WorkItem `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}  `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *WorkItemLinks `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
}

// Validate validates the WorkItemSingle media type instance.
func (mt *WorkItemSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if mt.Links != nil {
		if err2 := mt.Links.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeWorkItemSingle decodes the WorkItemSingle instance encoded in resp body.
func (c *Client) DecodeWorkItemSingle(resp *http.Response) (*WorkItemSingle, error) {
	var decoded WorkItemSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// A board for work item types (default view)
//
// Identifier: application/vnd.workitemboard+json; view=default
type WorkItemBoardSingle struct {
	Data *WorkItemBoardData `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}       `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *WorkItemBoardLinks `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
}

// Validate validates the WorkItemBoardSingle media type instance.
func (mt *WorkItemBoardSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if mt.Links != nil {
		if err2 := mt.Links.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeWorkItemBoardSingle decodes the WorkItemBoardSingle instance encoded in resp body.
func (c *Client) DecodeWorkItemBoardSingle(resp *http.Response) (*WorkItemBoardSingle, error) {
	var decoded WorkItemBoardSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// List of work item boards (default view)
//
// Identifier: application/vnd.workitemboardlist+json; view=default
type WorkItemBoardList struct {
	Data []*WorkItemBoardData `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}       `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *WorkItemBoardLinks `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
}

// Validate validates the WorkItemBoardList media type instance.
func (mt *WorkItemBoardList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if mt.Links != nil {
		if err2 := mt.Links.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeWorkItemBoardList decodes the WorkItemBoardList instance encoded in resp body.
func (c *Client) DecodeWorkItemBoardList(resp *http.Response) (*WorkItemBoardList, error) {
	var decoded WorkItemBoardList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds values for work item reorder (default view)
//
// Identifier: application/vnd.workitemjson; view=default
type WorkItemReorder struct {
	Data []*WorkItem `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// Validate validates the WorkItemReorder media type instance.
func (mt *WorkItemReorder) Validate() (err error) {
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeWorkItemReorder decodes the WorkItemReorder instance encoded in resp body.
func (c *Client) DecodeWorkItemReorder(resp *http.Response) (*WorkItemReorder, error) {
	var decoded WorkItemReorder
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Defines a connection between two work items (default view)
//
// Identifier: application/vnd.workitemlink+json; view=default
type WorkItemLinkSingle struct {
	Data *WorkItemLinkData `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}      `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *WorkItemLinkLinks `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
}

// Validate validates the WorkItemLinkSingle media type instance.
func (mt *WorkItemLinkSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if mt.Links != nil {
		if err2 := mt.Links.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeWorkItemLinkSingle decodes the WorkItemLinkSingle instance encoded in resp body.
func (c *Client) DecodeWorkItemLinkSingle(resp *http.Response) (*WorkItemLinkSingle, error) {
	var decoded WorkItemLinkSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the paginated response to a work item link list request (default view)
//
// Identifier: application/vnd.workitemlinklist+json; view=default
type WorkItemLinkList struct {
	Data []*WorkItemLinkData `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}         `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Meta     *WorkItemLinkListMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the WorkItemLinkList media type instance.
func (mt *WorkItemLinkList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if mt.Meta != nil {
		if err2 := mt.Meta.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeWorkItemLinkList decodes the WorkItemLinkList instance encoded in resp body.
func (c *Client) DecodeWorkItemLinkList(resp *http.Response) (*WorkItemLinkList, error) {
	var decoded WorkItemLinkList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Defines the type of link between two work items. (default view)
//
// Identifier: application/vnd.workitemlinktype+json; view=default
type WorkItemLinkTypeSingle struct {
	Data *WorkItemLinkTypeData `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}          `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *WorkItemLinkTypeLinks `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
}

// Validate validates the WorkItemLinkTypeSingle media type instance.
func (mt *WorkItemLinkTypeSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if mt.Links != nil {
		if err2 := mt.Links.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeWorkItemLinkTypeSingle decodes the WorkItemLinkTypeSingle instance encoded in resp body.
func (c *Client) DecodeWorkItemLinkTypeSingle(resp *http.Response) (*WorkItemLinkTypeSingle, error) {
	var decoded WorkItemLinkTypeSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the paginated response to a work item link type list request (default view)
//
// Identifier: application/vnd.workitemlinktypelist+json; view=default
type WorkItemLinkTypeList struct {
	Data []*WorkItemLinkTypeData `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}             `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Meta     *WorkItemLinkTypeListMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the WorkItemLinkTypeList media type instance.
func (mt *WorkItemLinkTypeList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if mt.Meta != nil {
		if err2 := mt.Meta.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeWorkItemLinkTypeList decodes the WorkItemLinkTypeList instance encoded in resp body.
func (c *Client) DecodeWorkItemLinkTypeList(resp *http.Response) (*WorkItemLinkTypeList, error) {
	var decoded WorkItemLinkTypeList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the paginated response to a work item list request (default view)
//
// Identifier: application/vnd.workitemlist+json; view=default
type WorkItemList struct {
	Data []*WorkItem `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}             `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *PagingLinks              `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	Meta     *WorkItemListResponseMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the WorkItemList media type instance.
func (mt *WorkItemList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeWorkItemList decodes the WorkItemList instance encoded in resp body.
func (c *Client) DecodeWorkItemList(resp *http.Response) (*WorkItemList, error) {
	var decoded WorkItemList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// A work item type describes the values a work item type instance can hold. (default view)
//
// Identifier: application/vnd.workitemtype+json; view=default
type WorkItemTypeSingle struct {
	Data *WorkItemTypeData `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}      `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *WorkItemTypeLinks `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
}

// Validate validates the WorkItemTypeSingle media type instance.
func (mt *WorkItemTypeSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if mt.Links != nil {
		if err2 := mt.Links.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeWorkItemTypeSingle decodes the WorkItemTypeSingle instance encoded in resp body.
func (c *Client) DecodeWorkItemTypeSingle(resp *http.Response) (*WorkItemTypeSingle, error) {
	var decoded WorkItemTypeSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// A group of work item types (default view)
//
// Identifier: application/vnd.workitemtypegroup+json; view=default
type WorkItemTypeGroupSingle struct {
	Data *WorkItemTypeGroupData `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}           `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *WorkItemTypeGroupLinks `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
}

// Validate validates the WorkItemTypeGroupSingle media type instance.
func (mt *WorkItemTypeGroupSingle) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	if mt.Data != nil {
		if err2 := mt.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if mt.Links != nil {
		if err2 := mt.Links.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeWorkItemTypeGroupSingle decodes the WorkItemTypeGroupSingle instance encoded in resp body.
func (c *Client) DecodeWorkItemTypeGroupSingle(resp *http.Response) (*WorkItemTypeGroupSingle, error) {
	var decoded WorkItemTypeGroupSingle
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// List of work item type groups (default view)
//
// Identifier: application/vnd.workitemtypegrouplist+json; view=default
type WorkItemTypeGroupList struct {
	Data []*WorkItemTypeGroupData `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}           `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *WorkItemTypeGroupLinks `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
}

// Validate validates the WorkItemTypeGroupList media type instance.
func (mt *WorkItemTypeGroupList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if mt.Links != nil {
		if err2 := mt.Links.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// DecodeWorkItemTypeGroupList decodes the WorkItemTypeGroupList instance encoded in resp body.
func (c *Client) DecodeWorkItemTypeGroupList(resp *http.Response) (*WorkItemTypeGroupList, error) {
	var decoded WorkItemTypeGroupList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the paginated response to a work item type list request (default view)
//
// Identifier: application/vnd.workitemtypelist+json; view=default
type WorkItemTypeList struct {
	Data []*WorkItemTypeData `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}         `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *PagingLinks          `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
	Meta     *WorkItemTypeListMeta `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
}

// Validate validates the WorkItemTypeList media type instance.
func (mt *WorkItemTypeList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeWorkItemTypeList decodes the WorkItemTypeList instance encoded in resp body.
func (c *Client) DecodeWorkItemTypeList(resp *http.Response) (*WorkItemTypeList, error) {
	var decoded WorkItemTypeList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// Holds the list of workspaces related to a codebase (default view)
//
// Identifier: application/vnd.workspacelist+json; view=default
type WorkspaceList struct {
	Data []*Workspace `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}       `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *WorkspaceEditLinks `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
}

// Validate validates the WorkspaceList media type instance.
func (mt *WorkspaceList) Validate() (err error) {
	if mt.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`response`, "data"))
	}
	for _, e := range mt.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// DecodeWorkspaceList decodes the WorkspaceList instance encoded in resp body.
func (c *Client) DecodeWorkspaceList(resp *http.Response) (*WorkspaceList, error) {
	var decoded WorkspaceList
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// JSONAPI store for the links of a workspace.  See also http://jsonapi.org/format/#document-resource-object (default view)
//
// Identifier: application/vnd.workspaceopen+json; view=default
type WorkspaceOpen struct {
	Links *WorkspaceOpenLinks `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
}

// DecodeWorkspaceOpen decodes the WorkspaceOpen instance encoded in resp body.
func (c *Client) DecodeWorkspaceOpen(resp *http.Response) (*WorkspaceOpen, error) {
	var decoded WorkspaceOpen
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}

// JSONAPI store Che Server state.  See also http://jsonapi.org/format/#document-resource-object (default view)
//
// Identifier: cheserverstate; view=default
type CheServerState struct {
	// Holds info about OSO cluster capacity - full / not full
	ClusterFull *bool `form:"clusterFull,omitempty" json:"clusterFull,omitempty" xml:"clusterFull,omitempty"`
	// Holds info about Che server type - multi-tenant / single-tenant
	MultiTenant *bool `form:"multiTenant,omitempty" json:"multiTenant,omitempty" xml:"multiTenant,omitempty"`
	// Holds info about Che server state - running / not running
	Running *bool `form:"running,omitempty" json:"running,omitempty" xml:"running,omitempty"`
}

// DecodeCheServerState decodes the CheServerState instance encoded in resp body.
func (c *Client) DecodeCheServerState(resp *http.Response) (*CheServerState, error) {
	var decoded CheServerState
	err := c.Decoder.Decode(&decoded, resp.Body, resp.Header.Get("Content-Type"))
	return &decoded, err
}
