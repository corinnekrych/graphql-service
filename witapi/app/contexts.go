// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "wit": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/fabric8-services/fabric8-wit/design
// --out=$(GOPATH)/src/github.com/fabric8-services/fabric8-wit
// --version=v1.3.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	uuid "github.com/satori/go.uuid"
	"net/http"
	"strconv"
)

// CleanUserServiceContext provides the UserService clean action context.
type CleanUserServiceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Remove bool
}

// NewCleanUserServiceContext parses the incoming request URL and body, performs validations and creates the
// context used by the UserService controller clean action.
func NewCleanUserServiceContext(ctx context.Context, r *http.Request, service *goa.Service) (*CleanUserServiceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CleanUserServiceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramRemove := req.Params["remove"]
	if len(paramRemove) == 0 {
		rctx.Remove = false
	} else {
		rawRemove := paramRemove[0]
		if remove, err2 := strconv.ParseBool(rawRemove); err2 == nil {
			rctx.Remove = remove
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("remove", rawRemove, "boolean"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CleanUserServiceContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CleanUserServiceContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CleanUserServiceContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CleanUserServiceContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowUserServiceContext provides the UserService show action context.
type ShowUserServiceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewShowUserServiceContext parses the incoming request URL and body, performs validations and creates the
// context used by the UserService controller show action.
func NewShowUserServiceContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowUserServiceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowUserServiceContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowUserServiceContext) OK(r *UserServiceSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowUserServiceContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowUserServiceContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowUserServiceContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowUserServiceContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateUserServiceContext provides the UserService update action context.
type UpdateUserServiceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewUpdateUserServiceContext parses the incoming request URL and body, performs validations and creates the
// context used by the UserService controller update action.
func NewUpdateUserServiceContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateUserServiceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateUserServiceContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateUserServiceContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// NotModified sends a HTTP response with status code 304.
func (ctx *UpdateUserServiceContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateUserServiceContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateUserServiceContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateUserServiceContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CreateChildAreaContext provides the area create-child action context.
type CreateChildAreaContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID      string
	Payload *CreateChildAreaPayload
}

// NewCreateChildAreaContext parses the incoming request URL and body, performs validations and creates the
// context used by the area controller create-child action.
func NewCreateChildAreaContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateChildAreaContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateChildAreaContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// createChildAreaPayload is the area create-child action payload.
type createChildAreaPayload struct {
	Data *area `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createChildAreaPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates CreateChildAreaPayload from createChildAreaPayload
func (payload *createChildAreaPayload) Publicize() *CreateChildAreaPayload {
	var pub CreateChildAreaPayload
	if payload.Data != nil {
		pub.Data = payload.Data.Publicize()
	}
	if payload.Included != nil {
		pub.Included = payload.Included
	}
	return &pub
}

// CreateChildAreaPayload is the area create-child action payload.
type CreateChildAreaPayload struct {
	Data *Area `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateChildAreaPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateChildAreaContext) Created(r *AreaSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateChildAreaContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateChildAreaContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *CreateChildAreaContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateChildAreaContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *CreateChildAreaContext) Conflict(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateChildAreaContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowAreaContext provides the area show action context.
type ShowAreaContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince *string
	IfNoneMatch     *string
	ID              string
}

// NewShowAreaContext parses the incoming request URL and body, performs validations and creates the
// context used by the area controller show action.
func NewShowAreaContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowAreaContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowAreaContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowAreaContext) OK(r *AreaSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ShowAreaContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowAreaContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowAreaContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowAreaContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowChildrenAreaContext provides the area show-children action context.
type ShowChildrenAreaContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince *string
	IfNoneMatch     *string
	ID              string
}

// NewShowChildrenAreaContext parses the incoming request URL and body, performs validations and creates the
// context used by the area controller show-children action.
func NewShowChildrenAreaContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowChildrenAreaContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowChildrenAreaContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowChildrenAreaContext) OK(r *AreaList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ShowChildrenAreaContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowChildrenAreaContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowChildrenAreaContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowChildrenAreaContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CheStartCodebaseContext provides the codebase cheStart action context.
type CheStartCodebaseContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewCheStartCodebaseContext parses the incoming request URL and body, performs validations and creates the
// context used by the codebase controller cheStart action.
func NewCheStartCodebaseContext(ctx context.Context, r *http.Request, service *goa.Service) (*CheStartCodebaseContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CheStartCodebaseContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CheStartCodebaseContext) OK(r *CheServerState) error {
	ctx.ResponseData.Header().Set("Content-Type", "cheserverstate")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Accepted sends a HTTP response with status code 202.
func (ctx *CheStartCodebaseContext) Accepted(r *CheServerState) error {
	ctx.ResponseData.Header().Set("Content-Type", "cheserverstate")
	return ctx.ResponseData.Service.Send(ctx.Context, 202, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CheStartCodebaseContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CheStartCodebaseContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CheStartCodebaseContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CheStateCodebaseContext provides the codebase cheState action context.
type CheStateCodebaseContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewCheStateCodebaseContext parses the incoming request URL and body, performs validations and creates the
// context used by the codebase controller cheState action.
func NewCheStateCodebaseContext(ctx context.Context, r *http.Request, service *goa.Service) (*CheStateCodebaseContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CheStateCodebaseContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CheStateCodebaseContext) OK(r *CheServerState) error {
	ctx.ResponseData.Header().Set("Content-Type", "cheserverstate")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CheStateCodebaseContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CheStateCodebaseContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CheStateCodebaseContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CreateCodebaseContext provides the codebase create action context.
type CreateCodebaseContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CodebaseID uuid.UUID
	Payload    *CreateCodebasePayload
}

// NewCreateCodebaseContext parses the incoming request URL and body, performs validations and creates the
// context used by the codebase controller create action.
func NewCreateCodebaseContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateCodebaseContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateCodebaseContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCodebaseID := req.Params["codebaseID"]
	if len(paramCodebaseID) > 0 {
		rawCodebaseID := paramCodebaseID[0]
		if codebaseID, err2 := uuid.FromString(rawCodebaseID); err2 == nil {
			rctx.CodebaseID = codebaseID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("codebaseID", rawCodebaseID, "uuid"))
		}
	}
	return &rctx, err
}

// createCodebasePayload is the codebase create action payload.
type createCodebasePayload struct {
	Data *createWorkspaceData `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createCodebasePayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	return
}

// Publicize creates CreateCodebasePayload from createCodebasePayload
func (payload *createCodebasePayload) Publicize() *CreateCodebasePayload {
	var pub CreateCodebasePayload
	if payload.Data != nil {
		pub.Data = payload.Data.Publicize()
	}
	return &pub
}

// CreateCodebasePayload is the codebase create action payload.
type CreateCodebasePayload struct {
	Data *CreateWorkspaceData `form:"data" json:"data" xml:"data"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateCodebasePayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateCodebaseContext) OK(r *WorkspaceOpen) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.workspaceopen+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateCodebaseContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateCodebaseContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateCodebaseContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateCodebaseContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DeleteCodebaseContext provides the codebase delete action context.
type DeleteCodebaseContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CodebaseID uuid.UUID
}

// NewDeleteCodebaseContext parses the incoming request URL and body, performs validations and creates the
// context used by the codebase controller delete action.
func NewDeleteCodebaseContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteCodebaseContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteCodebaseContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCodebaseID := req.Params["codebaseID"]
	if len(paramCodebaseID) > 0 {
		rawCodebaseID := paramCodebaseID[0]
		if codebaseID, err2 := uuid.FromString(rawCodebaseID); err2 == nil {
			rctx.CodebaseID = codebaseID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("codebaseID", rawCodebaseID, "uuid"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteCodebaseContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteCodebaseContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteCodebaseContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *DeleteCodebaseContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteCodebaseContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteCodebaseContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// EditCodebaseContext provides the codebase edit action context.
type EditCodebaseContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CodebaseID uuid.UUID
}

// NewEditCodebaseContext parses the incoming request URL and body, performs validations and creates the
// context used by the codebase controller edit action.
func NewEditCodebaseContext(ctx context.Context, r *http.Request, service *goa.Service) (*EditCodebaseContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := EditCodebaseContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCodebaseID := req.Params["codebaseID"]
	if len(paramCodebaseID) > 0 {
		rawCodebaseID := paramCodebaseID[0]
		if codebaseID, err2 := uuid.FromString(rawCodebaseID); err2 == nil {
			rctx.CodebaseID = codebaseID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("codebaseID", rawCodebaseID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *EditCodebaseContext) OK(r *WorkspaceList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *EditCodebaseContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *EditCodebaseContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *EditCodebaseContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *EditCodebaseContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListWorkspacesCodebaseContext provides the codebase listWorkspaces action context.
type ListWorkspacesCodebaseContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CodebaseID uuid.UUID
}

// NewListWorkspacesCodebaseContext parses the incoming request URL and body, performs validations and creates the
// context used by the codebase controller listWorkspaces action.
func NewListWorkspacesCodebaseContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListWorkspacesCodebaseContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListWorkspacesCodebaseContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCodebaseID := req.Params["codebaseID"]
	if len(paramCodebaseID) > 0 {
		rawCodebaseID := paramCodebaseID[0]
		if codebaseID, err2 := uuid.FromString(rawCodebaseID); err2 == nil {
			rctx.CodebaseID = codebaseID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("codebaseID", rawCodebaseID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListWorkspacesCodebaseContext) OK(r *WorkspaceList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListWorkspacesCodebaseContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ListWorkspacesCodebaseContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListWorkspacesCodebaseContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListWorkspacesCodebaseContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// OpenCodebaseContext provides the codebase open action context.
type OpenCodebaseContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CodebaseID  uuid.UUID
	WorkspaceID string
}

// NewOpenCodebaseContext parses the incoming request URL and body, performs validations and creates the
// context used by the codebase controller open action.
func NewOpenCodebaseContext(ctx context.Context, r *http.Request, service *goa.Service) (*OpenCodebaseContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := OpenCodebaseContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCodebaseID := req.Params["codebaseID"]
	if len(paramCodebaseID) > 0 {
		rawCodebaseID := paramCodebaseID[0]
		if codebaseID, err2 := uuid.FromString(rawCodebaseID); err2 == nil {
			rctx.CodebaseID = codebaseID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("codebaseID", rawCodebaseID, "uuid"))
		}
	}
	paramWorkspaceID := req.Params["workspaceID"]
	if len(paramWorkspaceID) > 0 {
		rawWorkspaceID := paramWorkspaceID[0]
		rctx.WorkspaceID = rawWorkspaceID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *OpenCodebaseContext) OK(r *WorkspaceOpen) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.workspaceopen+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *OpenCodebaseContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *OpenCodebaseContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *OpenCodebaseContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *OpenCodebaseContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowCodebaseContext provides the codebase show action context.
type ShowCodebaseContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CodebaseID uuid.UUID
}

// NewShowCodebaseContext parses the incoming request URL and body, performs validations and creates the
// context used by the codebase controller show action.
func NewShowCodebaseContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowCodebaseContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowCodebaseContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCodebaseID := req.Params["codebaseID"]
	if len(paramCodebaseID) > 0 {
		rawCodebaseID := paramCodebaseID[0]
		if codebaseID, err2 := uuid.FromString(rawCodebaseID); err2 == nil {
			rctx.CodebaseID = codebaseID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("codebaseID", rawCodebaseID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowCodebaseContext) OK(r *CodebaseSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowCodebaseContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowCodebaseContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowCodebaseContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateCodebaseContext provides the codebase update action context.
type UpdateCodebaseContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CodebaseID string
	Payload    *UpdateCodebasePayload
}

// NewUpdateCodebaseContext parses the incoming request URL and body, performs validations and creates the
// context used by the codebase controller update action.
func NewUpdateCodebaseContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateCodebaseContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateCodebaseContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCodebaseID := req.Params["codebaseID"]
	if len(paramCodebaseID) > 0 {
		rawCodebaseID := paramCodebaseID[0]
		rctx.CodebaseID = rawCodebaseID
	}
	return &rctx, err
}

// updateCodebasePayload is the codebase update action payload.
type updateCodebasePayload struct {
	Data *codebase `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateCodebasePayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates UpdateCodebasePayload from updateCodebasePayload
func (payload *updateCodebasePayload) Publicize() *UpdateCodebasePayload {
	var pub UpdateCodebasePayload
	if payload.Data != nil {
		pub.Data = payload.Data.Publicize()
	}
	if payload.Included != nil {
		pub.Included = payload.Included
	}
	return &pub
}

// UpdateCodebasePayload is the codebase update action payload.
type UpdateCodebasePayload struct {
	Data *Codebase `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateCodebasePayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateCodebaseContext) OK(r *CodebaseSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateCodebaseContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateCodebaseContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *UpdateCodebaseContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateCodebaseContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateCodebaseContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// AddCollaboratorsContext provides the collaborators add action context.
type AddCollaboratorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IdentityID string
	SpaceID    uuid.UUID
}

// NewAddCollaboratorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the collaborators controller add action.
func NewAddCollaboratorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddCollaboratorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddCollaboratorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramIdentityID := req.Params["identityID"]
	if len(paramIdentityID) > 0 {
		rawIdentityID := paramIdentityID[0]
		rctx.IdentityID = rawIdentityID
	}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddCollaboratorsContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AddCollaboratorsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// AddManyCollaboratorsContext provides the collaborators add-many action context.
type AddManyCollaboratorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SpaceID uuid.UUID
}

// NewAddManyCollaboratorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the collaborators controller add-many action.
func NewAddManyCollaboratorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddManyCollaboratorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddManyCollaboratorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *AddManyCollaboratorsContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AddManyCollaboratorsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListCollaboratorsContext provides the collaborators list action context.
type ListCollaboratorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SpaceID uuid.UUID
}

// NewListCollaboratorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the collaborators controller list action.
func NewListCollaboratorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListCollaboratorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListCollaboratorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListCollaboratorsContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListCollaboratorsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// RemoveCollaboratorsContext provides the collaborators remove action context.
type RemoveCollaboratorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IdentityID string
	SpaceID    uuid.UUID
}

// NewRemoveCollaboratorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the collaborators controller remove action.
func NewRemoveCollaboratorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*RemoveCollaboratorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RemoveCollaboratorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramIdentityID := req.Params["identityID"]
	if len(paramIdentityID) > 0 {
		rawIdentityID := paramIdentityID[0]
		rctx.IdentityID = rawIdentityID
	}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RemoveCollaboratorsContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *RemoveCollaboratorsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// RemoveManyCollaboratorsContext provides the collaborators remove-many action context.
type RemoveManyCollaboratorsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SpaceID uuid.UUID
}

// NewRemoveManyCollaboratorsContext parses the incoming request URL and body, performs validations and creates the
// context used by the collaborators controller remove-many action.
func NewRemoveManyCollaboratorsContext(ctx context.Context, r *http.Request, service *goa.Service) (*RemoveManyCollaboratorsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RemoveManyCollaboratorsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RemoveManyCollaboratorsContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *RemoveManyCollaboratorsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DeleteCommentsContext provides the comments delete action context.
type DeleteCommentsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CommentID uuid.UUID
}

// NewDeleteCommentsContext parses the incoming request URL and body, performs validations and creates the
// context used by the comments controller delete action.
func NewDeleteCommentsContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteCommentsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteCommentsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCommentID := req.Params["commentId"]
	if len(paramCommentID) > 0 {
		rawCommentID := paramCommentID[0]
		if commentID, err2 := uuid.FromString(rawCommentID); err2 == nil {
			rctx.CommentID = commentID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("commentId", rawCommentID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteCommentsContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteCommentsContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteCommentsContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *DeleteCommentsContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteCommentsContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteCommentsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowCommentsContext provides the comments show action context.
type ShowCommentsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince *string
	IfNoneMatch     *string
	CommentID       uuid.UUID
}

// NewShowCommentsContext parses the incoming request URL and body, performs validations and creates the
// context used by the comments controller show action.
func NewShowCommentsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowCommentsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowCommentsContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	paramCommentID := req.Params["commentId"]
	if len(paramCommentID) > 0 {
		rawCommentID := paramCommentID[0]
		if commentID, err2 := uuid.FromString(rawCommentID); err2 == nil {
			rctx.CommentID = commentID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("commentId", rawCommentID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowCommentsContext) OK(r *CommentSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ShowCommentsContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowCommentsContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowCommentsContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowCommentsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateCommentsContext provides the comments update action context.
type UpdateCommentsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	CommentID uuid.UUID
	Payload   *UpdateCommentsPayload
}

// NewUpdateCommentsContext parses the incoming request URL and body, performs validations and creates the
// context used by the comments controller update action.
func NewUpdateCommentsContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateCommentsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateCommentsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramCommentID := req.Params["commentId"]
	if len(paramCommentID) > 0 {
		rawCommentID := paramCommentID[0]
		if commentID, err2 := uuid.FromString(rawCommentID); err2 == nil {
			rctx.CommentID = commentID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("commentId", rawCommentID, "uuid"))
		}
	}
	return &rctx, err
}

// updateCommentsPayload is the comments update action payload.
type updateCommentsPayload struct {
	Data *comment `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateCommentsPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates UpdateCommentsPayload from updateCommentsPayload
func (payload *updateCommentsPayload) Publicize() *UpdateCommentsPayload {
	var pub UpdateCommentsPayload
	if payload.Data != nil {
		pub.Data = payload.Data.Publicize()
	}
	if payload.Included != nil {
		pub.Included = payload.Included
	}
	return &pub
}

// UpdateCommentsPayload is the comments update action payload.
type UpdateCommentsPayload struct {
	Data *Comment `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateCommentsPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateCommentsContext) OK(r *CommentSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateCommentsContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateCommentsContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *UpdateCommentsContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateCommentsContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateCommentsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DeleteDeploymentDeploymentsContext provides the deployments deleteDeployment action context.
type DeleteDeploymentDeploymentsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AppName    string
	DeployName string
	SpaceID    uuid.UUID
}

// NewDeleteDeploymentDeploymentsContext parses the incoming request URL and body, performs validations and creates the
// context used by the deployments controller deleteDeployment action.
func NewDeleteDeploymentDeploymentsContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteDeploymentDeploymentsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteDeploymentDeploymentsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAppName := req.Params["appName"]
	if len(paramAppName) > 0 {
		rawAppName := paramAppName[0]
		rctx.AppName = rawAppName
	}
	paramDeployName := req.Params["deployName"]
	if len(paramDeployName) > 0 {
		rawDeployName := paramDeployName[0]
		rctx.DeployName = rawDeployName
	}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteDeploymentDeploymentsContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteDeploymentDeploymentsContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteDeploymentDeploymentsContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteDeploymentDeploymentsContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteDeploymentDeploymentsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// SetDeploymentDeploymentsContext provides the deployments setDeployment action context.
type SetDeploymentDeploymentsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AppName    string
	DeployName string
	PodCount   *int
	SpaceID    uuid.UUID
}

// NewSetDeploymentDeploymentsContext parses the incoming request URL and body, performs validations and creates the
// context used by the deployments controller setDeployment action.
func NewSetDeploymentDeploymentsContext(ctx context.Context, r *http.Request, service *goa.Service) (*SetDeploymentDeploymentsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SetDeploymentDeploymentsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAppName := req.Params["appName"]
	if len(paramAppName) > 0 {
		rawAppName := paramAppName[0]
		rctx.AppName = rawAppName
	}
	paramDeployName := req.Params["deployName"]
	if len(paramDeployName) > 0 {
		rawDeployName := paramDeployName[0]
		rctx.DeployName = rawDeployName
	}
	paramPodCount := req.Params["podCount"]
	if len(paramPodCount) > 0 {
		rawPodCount := paramPodCount[0]
		if podCount, err2 := strconv.Atoi(rawPodCount); err2 == nil {
			tmp18 := podCount
			tmp17 := &tmp18
			rctx.PodCount = tmp17
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("podCount", rawPodCount, "integer"))
		}
	}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SetDeploymentDeploymentsContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SetDeploymentDeploymentsContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *SetDeploymentDeploymentsContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *SetDeploymentDeploymentsContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SetDeploymentDeploymentsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowAllEnvironmentsDeploymentsContext provides the deployments showAllEnvironments action context.
type ShowAllEnvironmentsDeploymentsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewShowAllEnvironmentsDeploymentsContext parses the incoming request URL and body, performs validations and creates the
// context used by the deployments controller showAllEnvironments action.
func NewShowAllEnvironmentsDeploymentsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowAllEnvironmentsDeploymentsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowAllEnvironmentsDeploymentsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowAllEnvironmentsDeploymentsContext) OK(r *SimpleEnvironmentList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowAllEnvironmentsDeploymentsContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowAllEnvironmentsDeploymentsContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowAllEnvironmentsDeploymentsContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowAllEnvironmentsDeploymentsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowDeploymentPodLimitRangeDeploymentsContext provides the deployments showDeploymentPodLimitRange action context.
type ShowDeploymentPodLimitRangeDeploymentsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AppName    string
	DeployName string
	SpaceID    uuid.UUID
}

// NewShowDeploymentPodLimitRangeDeploymentsContext parses the incoming request URL and body, performs validations and creates the
// context used by the deployments controller showDeploymentPodLimitRange action.
func NewShowDeploymentPodLimitRangeDeploymentsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowDeploymentPodLimitRangeDeploymentsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowDeploymentPodLimitRangeDeploymentsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAppName := req.Params["appName"]
	if len(paramAppName) > 0 {
		rawAppName := paramAppName[0]
		rctx.AppName = rawAppName
	}
	paramDeployName := req.Params["deployName"]
	if len(paramDeployName) > 0 {
		rawDeployName := paramDeployName[0]
		rctx.DeployName = rawDeployName
	}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowDeploymentPodLimitRangeDeploymentsContext) OK(r *SimpleDeploymentPodLimitRangeSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowDeploymentPodLimitRangeDeploymentsContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowDeploymentPodLimitRangeDeploymentsContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowDeploymentPodLimitRangeDeploymentsContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowDeploymentPodLimitRangeDeploymentsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowDeploymentStatSeriesDeploymentsContext provides the deployments showDeploymentStatSeries action context.
type ShowDeploymentStatSeriesDeploymentsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AppName    string
	DeployName string
	End        *float64
	Limit      *int
	SpaceID    uuid.UUID
	Start      *float64
}

// NewShowDeploymentStatSeriesDeploymentsContext parses the incoming request URL and body, performs validations and creates the
// context used by the deployments controller showDeploymentStatSeries action.
func NewShowDeploymentStatSeriesDeploymentsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowDeploymentStatSeriesDeploymentsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowDeploymentStatSeriesDeploymentsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAppName := req.Params["appName"]
	if len(paramAppName) > 0 {
		rawAppName := paramAppName[0]
		rctx.AppName = rawAppName
	}
	paramDeployName := req.Params["deployName"]
	if len(paramDeployName) > 0 {
		rawDeployName := paramDeployName[0]
		rctx.DeployName = rawDeployName
	}
	paramEnd := req.Params["end"]
	if len(paramEnd) > 0 {
		rawEnd := paramEnd[0]
		if end, err2 := strconv.ParseFloat(rawEnd, 64); err2 == nil {
			tmp21 := &end
			rctx.End = tmp21
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("end", rawEnd, "number"))
		}
	}
	paramLimit := req.Params["limit"]
	if len(paramLimit) > 0 {
		rawLimit := paramLimit[0]
		if limit, err2 := strconv.Atoi(rawLimit); err2 == nil {
			tmp23 := limit
			tmp22 := &tmp23
			rctx.Limit = tmp22
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("limit", rawLimit, "integer"))
		}
	}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	paramStart := req.Params["start"]
	if len(paramStart) > 0 {
		rawStart := paramStart[0]
		if start, err2 := strconv.ParseFloat(rawStart, 64); err2 == nil {
			tmp25 := &start
			rctx.Start = tmp25
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("start", rawStart, "number"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowDeploymentStatSeriesDeploymentsContext) OK(r *SimpleDeploymentStatSeriesSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowDeploymentStatSeriesDeploymentsContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowDeploymentStatSeriesDeploymentsContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowDeploymentStatSeriesDeploymentsContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowDeploymentStatSeriesDeploymentsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowDeploymentStatsDeploymentsContext provides the deployments showDeploymentStats action context.
type ShowDeploymentStatsDeploymentsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AppName    string
	DeployName string
	SpaceID    uuid.UUID
	Start      *float64
}

// NewShowDeploymentStatsDeploymentsContext parses the incoming request URL and body, performs validations and creates the
// context used by the deployments controller showDeploymentStats action.
func NewShowDeploymentStatsDeploymentsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowDeploymentStatsDeploymentsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowDeploymentStatsDeploymentsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAppName := req.Params["appName"]
	if len(paramAppName) > 0 {
		rawAppName := paramAppName[0]
		rctx.AppName = rawAppName
	}
	paramDeployName := req.Params["deployName"]
	if len(paramDeployName) > 0 {
		rawDeployName := paramDeployName[0]
		rctx.DeployName = rawDeployName
	}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	paramStart := req.Params["start"]
	if len(paramStart) > 0 {
		rawStart := paramStart[0]
		if start, err2 := strconv.ParseFloat(rawStart, 64); err2 == nil {
			tmp27 := &start
			rctx.Start = tmp27
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("start", rawStart, "number"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowDeploymentStatsDeploymentsContext) OK(r *SimpleDeploymentStatsSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowDeploymentStatsDeploymentsContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowDeploymentStatsDeploymentsContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowDeploymentStatsDeploymentsContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowDeploymentStatsDeploymentsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowEnvironmentsBySpaceDeploymentsContext provides the deployments showEnvironmentsBySpace action context.
type ShowEnvironmentsBySpaceDeploymentsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SpaceID uuid.UUID
}

// NewShowEnvironmentsBySpaceDeploymentsContext parses the incoming request URL and body, performs validations and creates the
// context used by the deployments controller showEnvironmentsBySpace action.
func NewShowEnvironmentsBySpaceDeploymentsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowEnvironmentsBySpaceDeploymentsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowEnvironmentsBySpaceDeploymentsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowEnvironmentsBySpaceDeploymentsContext) OK(r *SpaceAndOtherEnvironmentUsageList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowEnvironmentsBySpaceDeploymentsContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowEnvironmentsBySpaceDeploymentsContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowEnvironmentsBySpaceDeploymentsContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowEnvironmentsBySpaceDeploymentsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowSpaceDeploymentsContext provides the deployments showSpace action context.
type ShowSpaceDeploymentsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SpaceID uuid.UUID
}

// NewShowSpaceDeploymentsContext parses the incoming request URL and body, performs validations and creates the
// context used by the deployments controller showSpace action.
func NewShowSpaceDeploymentsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowSpaceDeploymentsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowSpaceDeploymentsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowSpaceDeploymentsContext) OK(r *SimpleSpaceSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowSpaceDeploymentsContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowSpaceDeploymentsContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowSpaceDeploymentsContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowSpaceDeploymentsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowSpaceEnvironmentsDeploymentsContext provides the deployments showSpaceEnvironments action context.
type ShowSpaceEnvironmentsDeploymentsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SpaceID uuid.UUID
}

// NewShowSpaceEnvironmentsDeploymentsContext parses the incoming request URL and body, performs validations and creates the
// context used by the deployments controller showSpaceEnvironments action.
func NewShowSpaceEnvironmentsDeploymentsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowSpaceEnvironmentsDeploymentsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowSpaceEnvironmentsDeploymentsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowSpaceEnvironmentsDeploymentsContext) OK(r *SimpleEnvironmentList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowSpaceEnvironmentsDeploymentsContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowSpaceEnvironmentsDeploymentsContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowSpaceEnvironmentsDeploymentsContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowSpaceEnvironmentsDeploymentsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// WatchEnvironmentEventsDeploymentsContext provides the deployments watchEnvironmentEvents action context.
type WatchEnvironmentEventsDeploymentsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	EnvName string
}

// NewWatchEnvironmentEventsDeploymentsContext parses the incoming request URL and body, performs validations and creates the
// context used by the deployments controller watchEnvironmentEvents action.
func NewWatchEnvironmentEventsDeploymentsContext(ctx context.Context, r *http.Request, service *goa.Service) (*WatchEnvironmentEventsDeploymentsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := WatchEnvironmentEventsDeploymentsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramEnvName := req.Params["envName"]
	if len(paramEnvName) > 0 {
		rawEnvName := paramEnvName[0]
		rctx.EnvName = rawEnvName
	}
	return &rctx, err
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *WatchEnvironmentEventsDeploymentsContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// ListEndpointsContext provides the endpoints list action context.
type ListEndpointsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListEndpointsContext parses the incoming request URL and body, performs validations and creates the
// context used by the endpoints controller list action.
func NewListEndpointsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListEndpointsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListEndpointsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListEndpointsContext) OK(r *EndpointSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListEndpointsContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListEndpointsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListFeaturesContext provides the features list action context.
type ListFeaturesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListFeaturesContext parses the incoming request URL and body, performs validations and creates the
// context used by the features controller list action.
func NewListFeaturesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListFeaturesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListFeaturesContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListFeaturesContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListFeaturesContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ListFeaturesContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListFeaturesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListFeaturesContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowFeaturesContext provides the features show action context.
type ShowFeaturesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	FeatureName string
}

// NewShowFeaturesContext parses the incoming request URL and body, performs validations and creates the
// context used by the features controller show action.
func NewShowFeaturesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowFeaturesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowFeaturesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramFeatureName := req.Params["featureName"]
	if len(paramFeatureName) > 0 {
		rawFeatureName := paramFeatureName[0]
		rctx.FeatureName = rawFeatureName
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowFeaturesContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowFeaturesContext) BadRequest() error {
	ctx.ResponseData.WriteHeader(400)
	return nil
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowFeaturesContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowFeaturesContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowFeaturesContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListFilterContext provides the filter list action context.
type ListFilterContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListFilterContext parses the incoming request URL and body, performs validations and creates the
// context used by the filter controller list action.
func NewListFilterContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListFilterContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListFilterContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListFilterContext) OK(r *FilterList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListFilterContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListFilterContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CreateChildIterationContext provides the iteration create-child action context.
type CreateChildIterationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IterationID string
	Payload     *CreateChildIterationPayload
}

// NewCreateChildIterationContext parses the incoming request URL and body, performs validations and creates the
// context used by the iteration controller create-child action.
func NewCreateChildIterationContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateChildIterationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateChildIterationContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramIterationID := req.Params["iterationID"]
	if len(paramIterationID) > 0 {
		rawIterationID := paramIterationID[0]
		rctx.IterationID = rawIterationID
	}
	return &rctx, err
}

// createChildIterationPayload is the iteration create-child action payload.
type createChildIterationPayload struct {
	Data *iteration `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createChildIterationPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates CreateChildIterationPayload from createChildIterationPayload
func (payload *createChildIterationPayload) Publicize() *CreateChildIterationPayload {
	var pub CreateChildIterationPayload
	if payload.Data != nil {
		pub.Data = payload.Data.Publicize()
	}
	if payload.Included != nil {
		pub.Included = payload.Included
	}
	return &pub
}

// CreateChildIterationPayload is the iteration create-child action payload.
type CreateChildIterationPayload struct {
	Data *Iteration `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateChildIterationPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateChildIterationContext) Created(r *IterationSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateChildIterationContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateChildIterationContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *CreateChildIterationContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateChildIterationContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *CreateChildIterationContext) Conflict(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateChildIterationContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DeleteIterationContext provides the iteration delete action context.
type DeleteIterationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IterationID uuid.UUID
}

// NewDeleteIterationContext parses the incoming request URL and body, performs validations and creates the
// context used by the iteration controller delete action.
func NewDeleteIterationContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteIterationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteIterationContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramIterationID := req.Params["iterationID"]
	if len(paramIterationID) > 0 {
		rawIterationID := paramIterationID[0]
		if iterationID, err2 := uuid.FromString(rawIterationID); err2 == nil {
			rctx.IterationID = iterationID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("iterationID", rawIterationID, "uuid"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteIterationContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteIterationContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteIterationContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *DeleteIterationContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteIterationContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteIterationContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowIterationContext provides the iteration show action context.
type ShowIterationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince *string
	IfNoneMatch     *string
	IterationID     string
}

// NewShowIterationContext parses the incoming request URL and body, performs validations and creates the
// context used by the iteration controller show action.
func NewShowIterationContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowIterationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowIterationContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	paramIterationID := req.Params["iterationID"]
	if len(paramIterationID) > 0 {
		rawIterationID := paramIterationID[0]
		rctx.IterationID = rawIterationID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowIterationContext) OK(r *IterationSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ShowIterationContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowIterationContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowIterationContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowIterationContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateIterationContext provides the iteration update action context.
type UpdateIterationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IterationID string
	Payload     *UpdateIterationPayload
}

// NewUpdateIterationContext parses the incoming request URL and body, performs validations and creates the
// context used by the iteration controller update action.
func NewUpdateIterationContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateIterationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateIterationContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramIterationID := req.Params["iterationID"]
	if len(paramIterationID) > 0 {
		rawIterationID := paramIterationID[0]
		rctx.IterationID = rawIterationID
	}
	return &rctx, err
}

// updateIterationPayload is the iteration update action payload.
type updateIterationPayload struct {
	Data *iteration `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateIterationPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates UpdateIterationPayload from updateIterationPayload
func (payload *updateIterationPayload) Publicize() *UpdateIterationPayload {
	var pub UpdateIterationPayload
	if payload.Data != nil {
		pub.Data = payload.Data.Publicize()
	}
	if payload.Included != nil {
		pub.Included = payload.Included
	}
	return &pub
}

// UpdateIterationPayload is the iteration update action payload.
type UpdateIterationPayload struct {
	Data *Iteration `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateIterationPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateIterationContext) OK(r *IterationSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateIterationContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateIterationContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *UpdateIterationContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateIterationContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateIterationContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CreateLabelContext provides the label create action context.
type CreateLabelContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SpaceID uuid.UUID
	Payload *CreateLabelPayload
}

// NewCreateLabelContext parses the incoming request URL and body, performs validations and creates the
// context used by the label controller create action.
func NewCreateLabelContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateLabelContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateLabelContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// createLabelPayload is the label create action payload.
type createLabelPayload struct {
	Data *label `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createLabelPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates CreateLabelPayload from createLabelPayload
func (payload *createLabelPayload) Publicize() *CreateLabelPayload {
	var pub CreateLabelPayload
	if payload.Data != nil {
		pub.Data = payload.Data.Publicize()
	}
	if payload.Included != nil {
		pub.Included = payload.Included
	}
	return &pub
}

// CreateLabelPayload is the label create action payload.
type CreateLabelPayload struct {
	Data *Label `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateLabelPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateLabelContext) Created(r *LabelSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateLabelContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateLabelContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *CreateLabelContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateLabelContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *CreateLabelContext) Conflict(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateLabelContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListLabelContext provides the label list action context.
type ListLabelContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince *string
	IfNoneMatch     *string
	SpaceID         uuid.UUID
}

// NewListLabelContext parses the incoming request URL and body, performs validations and creates the
// context used by the label controller list action.
func NewListLabelContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListLabelContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListLabelContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListLabelContext) OK(r *LabelList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ListLabelContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListLabelContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListLabelContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowLabelContext provides the label show action context.
type ShowLabelContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince *string
	IfNoneMatch     *string
	LabelID         uuid.UUID
	SpaceID         uuid.UUID
}

// NewShowLabelContext parses the incoming request URL and body, performs validations and creates the
// context used by the label controller show action.
func NewShowLabelContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowLabelContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowLabelContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	paramLabelID := req.Params["labelID"]
	if len(paramLabelID) > 0 {
		rawLabelID := paramLabelID[0]
		if labelID, err2 := uuid.FromString(rawLabelID); err2 == nil {
			rctx.LabelID = labelID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("labelID", rawLabelID, "uuid"))
		}
	}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowLabelContext) OK(r *LabelSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ShowLabelContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowLabelContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowLabelContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowLabelContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateLabelContext provides the label update action context.
type UpdateLabelContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	LabelID uuid.UUID
	SpaceID uuid.UUID
	Payload *UpdateLabelPayload
}

// NewUpdateLabelContext parses the incoming request URL and body, performs validations and creates the
// context used by the label controller update action.
func NewUpdateLabelContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateLabelContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateLabelContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramLabelID := req.Params["labelID"]
	if len(paramLabelID) > 0 {
		rawLabelID := paramLabelID[0]
		if labelID, err2 := uuid.FromString(rawLabelID); err2 == nil {
			rctx.LabelID = labelID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("labelID", rawLabelID, "uuid"))
		}
	}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// updateLabelPayload is the label update action payload.
type updateLabelPayload struct {
	Data *label `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateLabelPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates UpdateLabelPayload from updateLabelPayload
func (payload *updateLabelPayload) Publicize() *UpdateLabelPayload {
	var pub UpdateLabelPayload
	if payload.Data != nil {
		pub.Data = payload.Data.Publicize()
	}
	if payload.Included != nil {
		pub.Included = payload.Included
	}
	return &pub
}

// UpdateLabelPayload is the label update action payload.
type UpdateLabelPayload struct {
	Data *Label `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateLabelPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateLabelContext) OK(r *LabelSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateLabelContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateLabelContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *UpdateLabelContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateLabelContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *UpdateLabelContext) Conflict(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateLabelContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// AuthorizeLoginContext provides the login authorize action context.
type AuthorizeLoginContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewAuthorizeLoginContext parses the incoming request URL and body, performs validations and creates the
// context used by the login controller authorize action.
func NewAuthorizeLoginContext(ctx context.Context, r *http.Request, service *goa.Service) (*AuthorizeLoginContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AuthorizeLoginContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// TemporaryRedirect sends a HTTP response with status code 307.
func (ctx *AuthorizeLoginContext) TemporaryRedirect() error {
	ctx.ResponseData.WriteHeader(307)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AuthorizeLoginContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// GenerateLoginContext provides the login generate action context.
type GenerateLoginContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewGenerateLoginContext parses the incoming request URL and body, performs validations and creates the
// context used by the login controller generate action.
func NewGenerateLoginContext(ctx context.Context, r *http.Request, service *goa.Service) (*GenerateLoginContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GenerateLoginContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GenerateLoginContext) OK(r AuthTokenCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.authtoken+json; type=collection")
	if r == nil {
		r = AuthTokenCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *GenerateLoginContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GenerateLoginContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// RefreshLoginContext provides the login refresh action context.
type RefreshLoginContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewRefreshLoginContext parses the incoming request URL and body, performs validations and creates the
// context used by the login controller refresh action.
func NewRefreshLoginContext(ctx context.Context, r *http.Request, service *goa.Service) (*RefreshLoginContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RefreshLoginContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RefreshLoginContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *RefreshLoginContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// LogoutLogoutContext provides the logout logout action context.
type LogoutLogoutContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewLogoutLogoutContext parses the incoming request URL and body, performs validations and creates the
// context used by the logout controller logout action.
func NewLogoutLogoutContext(ctx context.Context, r *http.Request, service *goa.Service) (*LogoutLogoutContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := LogoutLogoutContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// TemporaryRedirect sends a HTTP response with status code 307.
func (ctx *LogoutLogoutContext) TemporaryRedirect() error {
	ctx.ResponseData.WriteHeader(307)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *LogoutLogoutContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowNamedWorkItemsContext provides the named_work_items show action context.
type ShowNamedWorkItemsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SpaceName string
	UserName  string
	WiNumber  int
}

// NewShowNamedWorkItemsContext parses the incoming request URL and body, performs validations and creates the
// context used by the named_work_items controller show action.
func NewShowNamedWorkItemsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowNamedWorkItemsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowNamedWorkItemsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSpaceName := req.Params["spaceName"]
	if len(paramSpaceName) > 0 {
		rawSpaceName := paramSpaceName[0]
		rctx.SpaceName = rawSpaceName
	}
	paramUserName := req.Params["userName"]
	if len(paramUserName) > 0 {
		rawUserName := paramUserName[0]
		rctx.UserName = rawUserName
	}
	paramWiNumber := req.Params["wiNumber"]
	if len(paramWiNumber) > 0 {
		rawWiNumber := paramWiNumber[0]
		if wiNumber, err2 := strconv.Atoi(rawWiNumber); err2 == nil {
			rctx.WiNumber = wiNumber
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("wiNumber", rawWiNumber, "integer"))
		}
	}
	return &rctx, err
}

// TemporaryRedirect sends a HTTP response with status code 307.
func (ctx *ShowNamedWorkItemsContext) TemporaryRedirect() error {
	ctx.ResponseData.WriteHeader(307)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowNamedWorkItemsContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowNamedWorkItemsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListNamedspacesContext provides the namedspaces list action context.
type ListNamedspacesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PageLimit  *int
	PageOffset *string
	UserName   string
}

// NewListNamedspacesContext parses the incoming request URL and body, performs validations and creates the
// context used by the namedspaces controller list action.
func NewListNamedspacesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListNamedspacesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListNamedspacesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPageLimit := req.Params["page[limit]"]
	if len(paramPageLimit) > 0 {
		rawPageLimit := paramPageLimit[0]
		if pageLimit, err2 := strconv.Atoi(rawPageLimit); err2 == nil {
			tmp40 := pageLimit
			tmp39 := &tmp40
			rctx.PageLimit = tmp39
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page[limit]", rawPageLimit, "integer"))
		}
	}
	paramPageOffset := req.Params["page[offset]"]
	if len(paramPageOffset) > 0 {
		rawPageOffset := paramPageOffset[0]
		rctx.PageOffset = &rawPageOffset
	}
	paramUserName := req.Params["userName"]
	if len(paramUserName) > 0 {
		rawUserName := paramUserName[0]
		rctx.UserName = rawUserName
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListNamedspacesContext) OK(r *SpaceList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListNamedspacesContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListNamedspacesContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListNamedspacesContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowNamedspacesContext provides the namedspaces show action context.
type ShowNamedspacesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SpaceName string
	UserName  string
}

// NewShowNamedspacesContext parses the incoming request URL and body, performs validations and creates the
// context used by the namedspaces controller show action.
func NewShowNamedspacesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowNamedspacesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowNamedspacesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSpaceName := req.Params["spaceName"]
	if len(paramSpaceName) > 0 {
		rawSpaceName := paramSpaceName[0]
		rctx.SpaceName = rawSpaceName
	}
	paramUserName := req.Params["userName"]
	if len(paramUserName) > 0 {
		rawUserName := paramUserName[0]
		rctx.UserName = rawUserName
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowNamedspacesContext) OK(r *SpaceSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowNamedspacesContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowNamedspacesContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowNamedspacesContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListPlannerBacklogContext provides the planner_backlog list action context.
type ListPlannerBacklogContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince    *string
	IfNoneMatch        *string
	Filter             *string
	FilterArea         *string
	FilterAssignee     *string
	FilterWorkitemtype *uuid.UUID
	PageLimit          *int
	PageOffset         *string
	SpaceID            uuid.UUID
}

// NewListPlannerBacklogContext parses the incoming request URL and body, performs validations and creates the
// context used by the planner_backlog controller list action.
func NewListPlannerBacklogContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListPlannerBacklogContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListPlannerBacklogContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	paramFilter := req.Params["filter"]
	if len(paramFilter) > 0 {
		rawFilter := paramFilter[0]
		rctx.Filter = &rawFilter
	}
	paramFilterArea := req.Params["filter[area]"]
	if len(paramFilterArea) > 0 {
		rawFilterArea := paramFilterArea[0]
		rctx.FilterArea = &rawFilterArea
	}
	paramFilterAssignee := req.Params["filter[assignee]"]
	if len(paramFilterAssignee) > 0 {
		rawFilterAssignee := paramFilterAssignee[0]
		rctx.FilterAssignee = &rawFilterAssignee
	}
	paramFilterWorkitemtype := req.Params["filter[workitemtype]"]
	if len(paramFilterWorkitemtype) > 0 {
		rawFilterWorkitemtype := paramFilterWorkitemtype[0]
		if filterWorkitemtype, err2 := uuid.FromString(rawFilterWorkitemtype); err2 == nil {
			tmp41 := &filterWorkitemtype
			rctx.FilterWorkitemtype = tmp41
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("filter[workitemtype]", rawFilterWorkitemtype, "uuid"))
		}
	}
	paramPageLimit := req.Params["page[limit]"]
	if len(paramPageLimit) > 0 {
		rawPageLimit := paramPageLimit[0]
		if pageLimit, err2 := strconv.Atoi(rawPageLimit); err2 == nil {
			tmp43 := pageLimit
			tmp42 := &tmp43
			rctx.PageLimit = tmp42
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page[limit]", rawPageLimit, "integer"))
		}
	}
	paramPageOffset := req.Params["page[offset]"]
	if len(paramPageOffset) > 0 {
		rawPageOffset := paramPageOffset[0]
		rctx.PageOffset = &rawPageOffset
	}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListPlannerBacklogContext) OK(r *WorkItemList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ListPlannerBacklogContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListPlannerBacklogContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListPlannerBacklogContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListPlannerBacklogContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CreateQueryContext provides the query create action context.
type CreateQueryContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SpaceID uuid.UUID
	Payload *CreateQueryPayload
}

// NewCreateQueryContext parses the incoming request URL and body, performs validations and creates the
// context used by the query controller create action.
func NewCreateQueryContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateQueryContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateQueryContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// createQueryPayload is the query create action payload.
type createQueryPayload struct {
	Data *query `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createQueryPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates CreateQueryPayload from createQueryPayload
func (payload *createQueryPayload) Publicize() *CreateQueryPayload {
	var pub CreateQueryPayload
	if payload.Data != nil {
		pub.Data = payload.Data.Publicize()
	}
	if payload.Included != nil {
		pub.Included = payload.Included
	}
	return &pub
}

// CreateQueryPayload is the query create action payload.
type CreateQueryPayload struct {
	Data *Query `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateQueryPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateQueryContext) Created(r *QuerySingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateQueryContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateQueryContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *CreateQueryContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateQueryContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *CreateQueryContext) Conflict(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateQueryContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DeleteQueryContext provides the query delete action context.
type DeleteQueryContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	QueryID uuid.UUID
	SpaceID uuid.UUID
}

// NewDeleteQueryContext parses the incoming request URL and body, performs validations and creates the
// context used by the query controller delete action.
func NewDeleteQueryContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteQueryContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteQueryContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramQueryID := req.Params["queryID"]
	if len(paramQueryID) > 0 {
		rawQueryID := paramQueryID[0]
		if queryID, err2 := uuid.FromString(rawQueryID); err2 == nil {
			rctx.QueryID = queryID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("queryID", rawQueryID, "uuid"))
		}
	}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteQueryContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteQueryContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteQueryContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *DeleteQueryContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteQueryContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteQueryContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListQueryContext provides the query list action context.
type ListQueryContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince *string
	IfNoneMatch     *string
	SpaceID         uuid.UUID
}

// NewListQueryContext parses the incoming request URL and body, performs validations and creates the
// context used by the query controller list action.
func NewListQueryContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListQueryContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListQueryContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListQueryContext) OK(r *QueryList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ListQueryContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListQueryContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ListQueryContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListQueryContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListQueryContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowQueryContext provides the query show action context.
type ShowQueryContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince *string
	IfNoneMatch     *string
	QueryID         uuid.UUID
	SpaceID         uuid.UUID
}

// NewShowQueryContext parses the incoming request URL and body, performs validations and creates the
// context used by the query controller show action.
func NewShowQueryContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowQueryContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowQueryContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	paramQueryID := req.Params["queryID"]
	if len(paramQueryID) > 0 {
		rawQueryID := paramQueryID[0]
		if queryID, err2 := uuid.FromString(rawQueryID); err2 == nil {
			rctx.QueryID = queryID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("queryID", rawQueryID, "uuid"))
		}
	}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowQueryContext) OK(r *QuerySingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ShowQueryContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowQueryContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowQueryContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *ShowQueryContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowQueryContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowQueryContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateQueryContext provides the query update action context.
type UpdateQueryContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince *string
	IfNoneMatch     *string
	QueryID         uuid.UUID
	SpaceID         uuid.UUID
	Payload         *UpdateQueryPayload
}

// NewUpdateQueryContext parses the incoming request URL and body, performs validations and creates the
// context used by the query controller update action.
func NewUpdateQueryContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateQueryContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateQueryContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	paramQueryID := req.Params["queryID"]
	if len(paramQueryID) > 0 {
		rawQueryID := paramQueryID[0]
		if queryID, err2 := uuid.FromString(rawQueryID); err2 == nil {
			rctx.QueryID = queryID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("queryID", rawQueryID, "uuid"))
		}
	}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// updateQueryPayload is the query update action payload.
type updateQueryPayload struct {
	Data *query `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateQueryPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates UpdateQueryPayload from updateQueryPayload
func (payload *updateQueryPayload) Publicize() *UpdateQueryPayload {
	var pub UpdateQueryPayload
	if payload.Data != nil {
		pub.Data = payload.Data.Publicize()
	}
	if payload.Included != nil {
		pub.Included = payload.Included
	}
	return &pub
}

// UpdateQueryPayload is the query update action payload.
type UpdateQueryPayload struct {
	Data *Query `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateQueryPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateQueryContext) OK(r *QuerySingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateQueryContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateQueryContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *UpdateQueryContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateQueryContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *UpdateQueryContext) Conflict(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateQueryContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// RenderRenderContext provides the render render action context.
type RenderRenderContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *MarkupRenderingPayload
}

// NewRenderRenderContext parses the incoming request URL and body, performs validations and creates the
// context used by the render controller render action.
func NewRenderRenderContext(ctx context.Context, r *http.Request, service *goa.Service) (*RenderRenderContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RenderRenderContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RenderRenderContext) OK(r *MarkupRenderingSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *RenderRenderContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *RenderRenderContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CodebasesSearchContext provides the search codebases action context.
type CodebasesSearchContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PageLimit  *int
	PageOffset *string
	URL        string
}

// NewCodebasesSearchContext parses the incoming request URL and body, performs validations and creates the
// context used by the search controller codebases action.
func NewCodebasesSearchContext(ctx context.Context, r *http.Request, service *goa.Service) (*CodebasesSearchContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CodebasesSearchContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPageLimit := req.Params["page[limit]"]
	if len(paramPageLimit) > 0 {
		rawPageLimit := paramPageLimit[0]
		if pageLimit, err2 := strconv.Atoi(rawPageLimit); err2 == nil {
			tmp54 := pageLimit
			tmp53 := &tmp54
			rctx.PageLimit = tmp53
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page[limit]", rawPageLimit, "integer"))
		}
	}
	paramPageOffset := req.Params["page[offset]"]
	if len(paramPageOffset) > 0 {
		rawPageOffset := paramPageOffset[0]
		rctx.PageOffset = &rawPageOffset
	}
	paramURL := req.Params["url"]
	if len(paramURL) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("url"))
	} else {
		rawURL := paramURL[0]
		rctx.URL = rawURL
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *CodebasesSearchContext) OK(r *CodebaseList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CodebasesSearchContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CodebasesSearchContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowSearchContext provides the search show action context.
type ShowSearchContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	FilterExpression   *string
	FilterParentexists *bool
	PageLimit          *int
	PageOffset         *string
	Q                  *string
	SpaceID            *string
}

// NewShowSearchContext parses the incoming request URL and body, performs validations and creates the
// context used by the search controller show action.
func NewShowSearchContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowSearchContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowSearchContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramFilterExpression := req.Params["filter[expression]"]
	if len(paramFilterExpression) > 0 {
		rawFilterExpression := paramFilterExpression[0]
		rctx.FilterExpression = &rawFilterExpression
	}
	paramFilterParentexists := req.Params["filter[parentexists]"]
	if len(paramFilterParentexists) > 0 {
		rawFilterParentexists := paramFilterParentexists[0]
		if filterParentexists, err2 := strconv.ParseBool(rawFilterParentexists); err2 == nil {
			tmp55 := &filterParentexists
			rctx.FilterParentexists = tmp55
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("filter[parentexists]", rawFilterParentexists, "boolean"))
		}
	}
	paramPageLimit := req.Params["page[limit]"]
	if len(paramPageLimit) > 0 {
		rawPageLimit := paramPageLimit[0]
		if pageLimit, err2 := strconv.Atoi(rawPageLimit); err2 == nil {
			tmp57 := pageLimit
			tmp56 := &tmp57
			rctx.PageLimit = tmp56
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page[limit]", rawPageLimit, "integer"))
		}
	}
	paramPageOffset := req.Params["page[offset]"]
	if len(paramPageOffset) > 0 {
		rawPageOffset := paramPageOffset[0]
		rctx.PageOffset = &rawPageOffset
	}
	paramQ := req.Params["q"]
	if len(paramQ) > 0 {
		rawQ := paramQ[0]
		rctx.Q = &rawQ
	}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		rctx.SpaceID = &rawSpaceID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowSearchContext) OK(r *SearchWorkItemList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowSearchContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowSearchContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// SpacesSearchContext provides the search spaces action context.
type SpacesSearchContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PageLimit  *int
	PageOffset *string
	Q          string
}

// NewSpacesSearchContext parses the incoming request URL and body, performs validations and creates the
// context used by the search controller spaces action.
func NewSpacesSearchContext(ctx context.Context, r *http.Request, service *goa.Service) (*SpacesSearchContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := SpacesSearchContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPageLimit := req.Params["page[limit]"]
	if len(paramPageLimit) > 0 {
		rawPageLimit := paramPageLimit[0]
		if pageLimit, err2 := strconv.Atoi(rawPageLimit); err2 == nil {
			tmp59 := pageLimit
			tmp58 := &tmp59
			rctx.PageLimit = tmp58
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page[limit]", rawPageLimit, "integer"))
		}
	}
	paramPageOffset := req.Params["page[offset]"]
	if len(paramPageOffset) > 0 {
		rawPageOffset := paramPageOffset[0]
		rctx.PageOffset = &rawPageOffset
	}
	paramQ := req.Params["q"]
	if len(paramQ) == 0 {
		err = goa.MergeErrors(err, goa.MissingParamError("q"))
	} else {
		rawQ := paramQ[0]
		rctx.Q = rawQ
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *SpacesSearchContext) OK(r *SearchSpaceList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *SpacesSearchContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *SpacesSearchContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UsersSearchContext provides the search users action context.
type UsersSearchContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewUsersSearchContext parses the incoming request URL and body, performs validations and creates the
// context used by the search controller users action.
func NewUsersSearchContext(ctx context.Context, r *http.Request, service *goa.Service) (*UsersSearchContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UsersSearchContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UsersSearchContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UsersSearchContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CreateSpaceContext provides the space create action context.
type CreateSpaceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateSpacePayload
}

// NewCreateSpaceContext parses the incoming request URL and body, performs validations and creates the
// context used by the space controller create action.
func NewCreateSpaceContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateSpaceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateSpaceContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createSpacePayload is the space create action payload.
type createSpacePayload struct {
	Data *space `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createSpacePayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates CreateSpacePayload from createSpacePayload
func (payload *createSpacePayload) Publicize() *CreateSpacePayload {
	var pub CreateSpacePayload
	if payload.Data != nil {
		pub.Data = payload.Data.Publicize()
	}
	if payload.Included != nil {
		pub.Included = payload.Included
	}
	return &pub
}

// CreateSpacePayload is the space create action payload.
type CreateSpacePayload struct {
	Data *Space `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateSpacePayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateSpaceContext) Created(r *SpaceSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateSpaceContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateSpaceContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateSpaceContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *CreateSpaceContext) Conflict(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateSpaceContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DeleteSpaceContext provides the space delete action context.
type DeleteSpaceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SkipCluster *bool
	SpaceID     uuid.UUID
}

// NewDeleteSpaceContext parses the incoming request URL and body, performs validations and creates the
// context used by the space controller delete action.
func NewDeleteSpaceContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteSpaceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteSpaceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSkipCluster := req.Params["skipCluster"]
	if len(paramSkipCluster) > 0 {
		rawSkipCluster := paramSkipCluster[0]
		if skipCluster, err2 := strconv.ParseBool(rawSkipCluster); err2 == nil {
			tmp60 := &skipCluster
			rctx.SkipCluster = tmp60
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("skipCluster", rawSkipCluster, "boolean"))
		}
	}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteSpaceContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteSpaceContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteSpaceContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *DeleteSpaceContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteSpaceContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteSpaceContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListSpaceContext provides the space list action context.
type ListSpaceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince *string
	IfNoneMatch     *string
	PageLimit       *int
	PageOffset      *string
}

// NewListSpaceContext parses the incoming request URL and body, performs validations and creates the
// context used by the space controller list action.
func NewListSpaceContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListSpaceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListSpaceContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	paramPageLimit := req.Params["page[limit]"]
	if len(paramPageLimit) > 0 {
		rawPageLimit := paramPageLimit[0]
		if pageLimit, err2 := strconv.Atoi(rawPageLimit); err2 == nil {
			tmp63 := pageLimit
			tmp62 := &tmp63
			rctx.PageLimit = tmp62
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page[limit]", rawPageLimit, "integer"))
		}
	}
	paramPageOffset := req.Params["page[offset]"]
	if len(paramPageOffset) > 0 {
		rawPageOffset := paramPageOffset[0]
		rctx.PageOffset = &rawPageOffset
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListSpaceContext) OK(r *SpaceList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ListSpaceContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListSpaceContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ListSpaceContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListSpaceContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowSpaceContext provides the space show action context.
type ShowSpaceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince *string
	IfNoneMatch     *string
	SpaceID         uuid.UUID
}

// NewShowSpaceContext parses the incoming request URL and body, performs validations and creates the
// context used by the space controller show action.
func NewShowSpaceContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowSpaceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowSpaceContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowSpaceContext) OK(r *SpaceSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ShowSpaceContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowSpaceContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowSpaceContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowSpaceContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateSpaceContext provides the space update action context.
type UpdateSpaceContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SpaceID uuid.UUID
	Payload *UpdateSpacePayload
}

// NewUpdateSpaceContext parses the incoming request URL and body, performs validations and creates the
// context used by the space controller update action.
func NewUpdateSpaceContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateSpaceContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateSpaceContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// updateSpacePayload is the space update action payload.
type updateSpacePayload struct {
	Data *space `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateSpacePayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates UpdateSpacePayload from updateSpacePayload
func (payload *updateSpacePayload) Publicize() *UpdateSpacePayload {
	var pub UpdateSpacePayload
	if payload.Data != nil {
		pub.Data = payload.Data.Publicize()
	}
	if payload.Included != nil {
		pub.Included = payload.Included
	}
	return &pub
}

// UpdateSpacePayload is the space update action payload.
type UpdateSpacePayload struct {
	Data *Space `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateSpacePayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateSpaceContext) OK(r *SpaceSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateSpaceContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateSpaceContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *UpdateSpaceContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateSpaceContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *UpdateSpaceContext) Conflict(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateSpaceContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListSpaceAreasContext provides the space_areas list action context.
type ListSpaceAreasContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince *string
	IfNoneMatch     *string
	SpaceID         uuid.UUID
}

// NewListSpaceAreasContext parses the incoming request URL and body, performs validations and creates the
// context used by the space_areas controller list action.
func NewListSpaceAreasContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListSpaceAreasContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListSpaceAreasContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListSpaceAreasContext) OK(r *AreaList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ListSpaceAreasContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListSpaceAreasContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListSpaceAreasContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListSpaceAreasContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CreateSpaceCodebasesContext provides the space_codebases create action context.
type CreateSpaceCodebasesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SpaceID uuid.UUID
	Payload *CreateSpaceCodebasesPayload
}

// NewCreateSpaceCodebasesContext parses the incoming request URL and body, performs validations and creates the
// context used by the space_codebases controller create action.
func NewCreateSpaceCodebasesContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateSpaceCodebasesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateSpaceCodebasesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// createSpaceCodebasesPayload is the space_codebases create action payload.
type createSpaceCodebasesPayload struct {
	Data *codebase `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createSpaceCodebasesPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates CreateSpaceCodebasesPayload from createSpaceCodebasesPayload
func (payload *createSpaceCodebasesPayload) Publicize() *CreateSpaceCodebasesPayload {
	var pub CreateSpaceCodebasesPayload
	if payload.Data != nil {
		pub.Data = payload.Data.Publicize()
	}
	if payload.Included != nil {
		pub.Included = payload.Included
	}
	return &pub
}

// CreateSpaceCodebasesPayload is the space_codebases create action payload.
type CreateSpaceCodebasesPayload struct {
	Data *Codebase `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateSpaceCodebasesPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateSpaceCodebasesContext) Created(r *CodebaseSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateSpaceCodebasesContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateSpaceCodebasesContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *CreateSpaceCodebasesContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateSpaceCodebasesContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *CreateSpaceCodebasesContext) Conflict(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateSpaceCodebasesContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListSpaceCodebasesContext provides the space_codebases list action context.
type ListSpaceCodebasesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	PageLimit  *int
	PageOffset *string
	SpaceID    uuid.UUID
}

// NewListSpaceCodebasesContext parses the incoming request URL and body, performs validations and creates the
// context used by the space_codebases controller list action.
func NewListSpaceCodebasesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListSpaceCodebasesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListSpaceCodebasesContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramPageLimit := req.Params["page[limit]"]
	if len(paramPageLimit) > 0 {
		rawPageLimit := paramPageLimit[0]
		if pageLimit, err2 := strconv.Atoi(rawPageLimit); err2 == nil {
			tmp69 := pageLimit
			tmp68 := &tmp69
			rctx.PageLimit = tmp68
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page[limit]", rawPageLimit, "integer"))
		}
	}
	paramPageOffset := req.Params["page[offset]"]
	if len(paramPageOffset) > 0 {
		rawPageOffset := paramPageOffset[0]
		rctx.PageOffset = &rawPageOffset
	}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListSpaceCodebasesContext) OK(r *CodebaseList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListSpaceCodebasesContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListSpaceCodebasesContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListSpaceCodebasesContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CreateSpaceIterationsContext provides the space_iterations create action context.
type CreateSpaceIterationsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SpaceID uuid.UUID
	Payload *CreateSpaceIterationsPayload
}

// NewCreateSpaceIterationsContext parses the incoming request URL and body, performs validations and creates the
// context used by the space_iterations controller create action.
func NewCreateSpaceIterationsContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateSpaceIterationsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateSpaceIterationsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// createSpaceIterationsPayload is the space_iterations create action payload.
type createSpaceIterationsPayload struct {
	Data *iteration `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createSpaceIterationsPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates CreateSpaceIterationsPayload from createSpaceIterationsPayload
func (payload *createSpaceIterationsPayload) Publicize() *CreateSpaceIterationsPayload {
	var pub CreateSpaceIterationsPayload
	if payload.Data != nil {
		pub.Data = payload.Data.Publicize()
	}
	if payload.Included != nil {
		pub.Included = payload.Included
	}
	return &pub
}

// CreateSpaceIterationsPayload is the space_iterations create action payload.
type CreateSpaceIterationsPayload struct {
	Data *Iteration `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateSpaceIterationsPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateSpaceIterationsContext) Created(r *IterationSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateSpaceIterationsContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateSpaceIterationsContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *CreateSpaceIterationsContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateSpaceIterationsContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *CreateSpaceIterationsContext) Conflict(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateSpaceIterationsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListSpaceIterationsContext provides the space_iterations list action context.
type ListSpaceIterationsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince *string
	IfNoneMatch     *string
	SpaceID         uuid.UUID
}

// NewListSpaceIterationsContext parses the incoming request URL and body, performs validations and creates the
// context used by the space_iterations controller list action.
func NewListSpaceIterationsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListSpaceIterationsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListSpaceIterationsContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListSpaceIterationsContext) OK(r *IterationList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ListSpaceIterationsContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListSpaceIterationsContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListSpaceIterationsContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListSpaceIterationsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListSpaceTemplateContext provides the space_template list action context.
type ListSpaceTemplateContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince *string
	IfNoneMatch     *string
}

// NewListSpaceTemplateContext parses the incoming request URL and body, performs validations and creates the
// context used by the space_template controller list action.
func NewListSpaceTemplateContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListSpaceTemplateContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListSpaceTemplateContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListSpaceTemplateContext) OK(r *SpaceTemplateList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ListSpaceTemplateContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListSpaceTemplateContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowSpaceTemplateContext provides the space_template show action context.
type ShowSpaceTemplateContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince *string
	IfNoneMatch     *string
	SpaceTemplateID uuid.UUID
}

// NewShowSpaceTemplateContext parses the incoming request URL and body, performs validations and creates the
// context used by the space_template controller show action.
func NewShowSpaceTemplateContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowSpaceTemplateContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowSpaceTemplateContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	paramSpaceTemplateID := req.Params["spaceTemplateID"]
	if len(paramSpaceTemplateID) > 0 {
		rawSpaceTemplateID := paramSpaceTemplateID[0]
		if spaceTemplateID, err2 := uuid.FromString(rawSpaceTemplateID); err2 == nil {
			rctx.SpaceTemplateID = spaceTemplateID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceTemplateID", rawSpaceTemplateID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowSpaceTemplateContext) OK(r *SpaceTemplateSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ShowSpaceTemplateContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowSpaceTemplateContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowSpaceTemplateContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowSpaceTemplateContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowStatusContext provides the status show action context.
type ShowStatusContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewShowStatusContext parses the incoming request URL and body, performs validations and creates the
// context used by the status controller show action.
func NewShowStatusContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowStatusContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowStatusContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowStatusContext) OK(r *Status) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.status+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// ServiceUnavailable sends a HTTP response with status code 503.
func (ctx *ShowStatusContext) ServiceUnavailable(r *Status) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.status+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 503, r)
}

// CreateTrackerContext provides the tracker create action context.
type CreateTrackerContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateTrackerPayload
}

// NewCreateTrackerContext parses the incoming request URL and body, performs validations and creates the
// context used by the tracker controller create action.
func NewCreateTrackerContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateTrackerContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateTrackerContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// createTrackerPayload is the tracker create action payload.
type createTrackerPayload struct {
	Data *tracker `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createTrackerPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates CreateTrackerPayload from createTrackerPayload
func (payload *createTrackerPayload) Publicize() *CreateTrackerPayload {
	var pub CreateTrackerPayload
	if payload.Data != nil {
		pub.Data = payload.Data.Publicize()
	}
	if payload.Included != nil {
		pub.Included = payload.Included
	}
	return &pub
}

// CreateTrackerPayload is the tracker create action payload.
type CreateTrackerPayload struct {
	Data *Tracker `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateTrackerPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateTrackerContext) Created(r *TrackerSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateTrackerContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateTrackerContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *CreateTrackerContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateTrackerContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateTrackerContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DeleteTrackerContext provides the tracker delete action context.
type DeleteTrackerContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID uuid.UUID
}

// NewDeleteTrackerContext parses the incoming request URL and body, performs validations and creates the
// context used by the tracker controller delete action.
func NewDeleteTrackerContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteTrackerContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteTrackerContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := uuid.FromString(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "uuid"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteTrackerContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteTrackerContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteTrackerContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *DeleteTrackerContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteTrackerContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteTrackerContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListTrackerContext provides the tracker list action context.
type ListTrackerContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Filter *string
	Page   *string
}

// NewListTrackerContext parses the incoming request URL and body, performs validations and creates the
// context used by the tracker controller list action.
func NewListTrackerContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListTrackerContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListTrackerContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramFilter := req.Params["filter"]
	if len(paramFilter) > 0 {
		rawFilter := paramFilter[0]
		rctx.Filter = &rawFilter
	}
	paramPage := req.Params["page"]
	if len(paramPage) > 0 {
		rawPage := paramPage[0]
		rctx.Page = &rawPage
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListTrackerContext) OK(r *TrackerList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ListTrackerContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// TemporaryRedirect sends a HTTP response with status code 307.
func (ctx *ListTrackerContext) TemporaryRedirect() error {
	ctx.ResponseData.WriteHeader(307)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListTrackerContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListTrackerContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowTrackerContext provides the tracker show action context.
type ShowTrackerContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID uuid.UUID
}

// NewShowTrackerContext parses the incoming request URL and body, performs validations and creates the
// context used by the tracker controller show action.
func NewShowTrackerContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowTrackerContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowTrackerContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		if id, err2 := uuid.FromString(rawID); err2 == nil {
			rctx.ID = id
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("id", rawID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowTrackerContext) OK(r *TrackerSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ShowTrackerContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowTrackerContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowTrackerContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowTrackerContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateTrackerContext provides the tracker update action context.
type UpdateTrackerContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID      string
	Payload *UpdateTrackerPayload
}

// NewUpdateTrackerContext parses the incoming request URL and body, performs validations and creates the
// context used by the tracker controller update action.
func NewUpdateTrackerContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateTrackerContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateTrackerContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// updateTrackerPayload is the tracker update action payload.
type updateTrackerPayload struct {
	Data *tracker `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateTrackerPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates UpdateTrackerPayload from updateTrackerPayload
func (payload *updateTrackerPayload) Publicize() *UpdateTrackerPayload {
	var pub UpdateTrackerPayload
	if payload.Data != nil {
		pub.Data = payload.Data.Publicize()
	}
	if payload.Included != nil {
		pub.Included = payload.Included
	}
	return &pub
}

// UpdateTrackerPayload is the tracker update action payload.
type UpdateTrackerPayload struct {
	Data *Tracker `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateTrackerPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateTrackerContext) OK(r *TrackerSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateTrackerContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateTrackerContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *UpdateTrackerContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateTrackerContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateTrackerContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CreateTrackerqueryContext provides the trackerquery create action context.
type CreateTrackerqueryContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateTrackerQueryAlternatePayload
}

// NewCreateTrackerqueryContext parses the incoming request URL and body, performs validations and creates the
// context used by the trackerquery controller create action.
func NewCreateTrackerqueryContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateTrackerqueryContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateTrackerqueryContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateTrackerqueryContext) Created(r *TrackerQuery) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.trackerquery+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateTrackerqueryContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateTrackerqueryContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateTrackerqueryContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateTrackerqueryContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DeleteTrackerqueryContext provides the trackerquery delete action context.
type DeleteTrackerqueryContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID string
}

// NewDeleteTrackerqueryContext parses the incoming request URL and body, performs validations and creates the
// context used by the trackerquery controller delete action.
func NewDeleteTrackerqueryContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteTrackerqueryContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteTrackerqueryContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteTrackerqueryContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteTrackerqueryContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteTrackerqueryContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteTrackerqueryContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteTrackerqueryContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListTrackerqueryContext provides the trackerquery list action context.
type ListTrackerqueryContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListTrackerqueryContext parses the incoming request URL and body, performs validations and creates the
// context used by the trackerquery controller list action.
func NewListTrackerqueryContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListTrackerqueryContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListTrackerqueryContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListTrackerqueryContext) OK(r TrackerQueryCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.trackerquery+json; type=collection")
	if r == nil {
		r = TrackerQueryCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListTrackerqueryContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListTrackerqueryContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListTrackerqueryContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowTrackerqueryContext provides the trackerquery show action context.
type ShowTrackerqueryContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID string
}

// NewShowTrackerqueryContext parses the incoming request URL and body, performs validations and creates the
// context used by the trackerquery controller show action.
func NewShowTrackerqueryContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowTrackerqueryContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowTrackerqueryContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowTrackerqueryContext) OK(r *TrackerQuery) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.trackerquery+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowTrackerqueryContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowTrackerqueryContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowTrackerqueryContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateTrackerqueryContext provides the trackerquery update action context.
type UpdateTrackerqueryContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID      string
	Payload *UpdateTrackerQueryAlternatePayload
}

// NewUpdateTrackerqueryContext parses the incoming request URL and body, performs validations and creates the
// context used by the trackerquery controller update action.
func NewUpdateTrackerqueryContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateTrackerqueryContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateTrackerqueryContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateTrackerqueryContext) OK(r *TrackerQuery) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.trackerquery+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateTrackerqueryContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateTrackerqueryContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateTrackerqueryContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateTrackerqueryContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListSpacesUserContext provides the user listSpaces action context.
type ListSpacesUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListSpacesUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller listSpaces action.
func NewListSpacesUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListSpacesUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListSpacesUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListSpacesUserContext) OK(r *UserSpacesList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ListSpacesUserContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListSpacesUserContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowUserContext provides the user show action context.
type ShowUserContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince *string
	IfNoneMatch     *string
}

// NewShowUserContext parses the incoming request URL and body, performs validations and creates the
// context used by the user controller show action.
func NewShowUserContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowUserContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowUserContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowUserContext) OK(r *User) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ShowUserContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowUserContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowUserContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowUserContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CreateUserAsServiceAccountUsersContext provides the users createUserAsServiceAccount action context.
type CreateUserAsServiceAccountUsersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID      string
	Payload *CreateUserAsServiceAccountUsersPayload
}

// NewCreateUserAsServiceAccountUsersContext parses the incoming request URL and body, performs validations and creates the
// context used by the users controller createUserAsServiceAccount action.
func NewCreateUserAsServiceAccountUsersContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateUserAsServiceAccountUsersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateUserAsServiceAccountUsersContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// createUserAsServiceAccountUsersPayload is the users createUserAsServiceAccount action payload.
type createUserAsServiceAccountUsersPayload struct {
	Data *createUserData `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createUserAsServiceAccountUsersPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates CreateUserAsServiceAccountUsersPayload from createUserAsServiceAccountUsersPayload
func (payload *createUserAsServiceAccountUsersPayload) Publicize() *CreateUserAsServiceAccountUsersPayload {
	var pub CreateUserAsServiceAccountUsersPayload
	if payload.Data != nil {
		pub.Data = payload.Data.Publicize()
	}
	return &pub
}

// CreateUserAsServiceAccountUsersPayload is the users createUserAsServiceAccount action payload.
type CreateUserAsServiceAccountUsersPayload struct {
	Data *CreateUserData `form:"data" json:"data" xml:"data"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateUserAsServiceAccountUsersPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateUserAsServiceAccountUsersContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateUserAsServiceAccountUsersContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateUserAsServiceAccountUsersContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *CreateUserAsServiceAccountUsersContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateUserAsServiceAccountUsersContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *CreateUserAsServiceAccountUsersContext) Conflict(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateUserAsServiceAccountUsersContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListUsersContext provides the users list action context.
type ListUsersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListUsersContext parses the incoming request URL and body, performs validations and creates the
// context used by the users controller list action.
func NewListUsersContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListUsersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListUsersContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListUsersContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListUsersContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowUsersContext provides the users show action context.
type ShowUsersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID string
}

// NewShowUsersContext parses the incoming request URL and body, performs validations and creates the
// context used by the users controller show action.
func NewShowUsersContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowUsersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowUsersContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowUsersContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowUsersContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateUsersContext provides the users update action context.
type UpdateUsersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewUpdateUsersContext parses the incoming request URL and body, performs validations and creates the
// context used by the users controller update action.
func NewUpdateUsersContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateUsersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateUsersContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateUsersContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateUsersContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateUserAsServiceAccountUsersContext provides the users updateUserAsServiceAccount action context.
type UpdateUserAsServiceAccountUsersContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID      string
	Payload *UpdateUserAsServiceAccountUsersPayload
}

// NewUpdateUserAsServiceAccountUsersContext parses the incoming request URL and body, performs validations and creates the
// context used by the users controller updateUserAsServiceAccount action.
func NewUpdateUserAsServiceAccountUsersContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateUserAsServiceAccountUsersContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateUserAsServiceAccountUsersContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// updateUserAsServiceAccountUsersPayload is the users updateUserAsServiceAccount action payload.
type updateUserAsServiceAccountUsersPayload struct {
	Data *updateUserData `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateUserAsServiceAccountUsersPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates UpdateUserAsServiceAccountUsersPayload from updateUserAsServiceAccountUsersPayload
func (payload *updateUserAsServiceAccountUsersPayload) Publicize() *UpdateUserAsServiceAccountUsersPayload {
	var pub UpdateUserAsServiceAccountUsersPayload
	if payload.Data != nil {
		pub.Data = payload.Data.Publicize()
	}
	return &pub
}

// UpdateUserAsServiceAccountUsersPayload is the users updateUserAsServiceAccount action payload.
type UpdateUserAsServiceAccountUsersPayload struct {
	Data *UpdateUserData `form:"data" json:"data" xml:"data"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateUserAsServiceAccountUsersPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateUserAsServiceAccountUsersContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateUserAsServiceAccountUsersContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateUserAsServiceAccountUsersContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *UpdateUserAsServiceAccountUsersContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateUserAsServiceAccountUsersContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *UpdateUserAsServiceAccountUsersContext) Conflict(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateUserAsServiceAccountUsersContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowWorkItemBoardContext provides the work_item_board show action context.
type ShowWorkItemBoardContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	BoardID uuid.UUID
}

// NewShowWorkItemBoardContext parses the incoming request URL and body, performs validations and creates the
// context used by the work_item_board controller show action.
func NewShowWorkItemBoardContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowWorkItemBoardContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowWorkItemBoardContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramBoardID := req.Params["boardID"]
	if len(paramBoardID) > 0 {
		rawBoardID := paramBoardID[0]
		if boardID, err2 := uuid.FromString(rawBoardID); err2 == nil {
			rctx.BoardID = boardID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("boardID", rawBoardID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowWorkItemBoardContext) OK(r *WorkItemBoardSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowWorkItemBoardContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowWorkItemBoardContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListWorkItemBoardsContext provides the work_item_boards list action context.
type ListWorkItemBoardsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SpaceTemplateID uuid.UUID
}

// NewListWorkItemBoardsContext parses the incoming request URL and body, performs validations and creates the
// context used by the work_item_boards controller list action.
func NewListWorkItemBoardsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListWorkItemBoardsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListWorkItemBoardsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSpaceTemplateID := req.Params["spaceTemplateID"]
	if len(paramSpaceTemplateID) > 0 {
		rawSpaceTemplateID := paramSpaceTemplateID[0]
		if spaceTemplateID, err2 := uuid.FromString(rawSpaceTemplateID); err2 == nil {
			rctx.SpaceTemplateID = spaceTemplateID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceTemplateID", rawSpaceTemplateID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListWorkItemBoardsContext) OK(r *WorkItemBoardList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListWorkItemBoardsContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListWorkItemBoardsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CreateWorkItemCommentsContext provides the work_item_comments create action context.
type CreateWorkItemCommentsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	WiID    uuid.UUID
	Payload *CreateWorkItemCommentsPayload
}

// NewCreateWorkItemCommentsContext parses the incoming request URL and body, performs validations and creates the
// context used by the work_item_comments controller create action.
func NewCreateWorkItemCommentsContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateWorkItemCommentsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateWorkItemCommentsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramWiID := req.Params["wiID"]
	if len(paramWiID) > 0 {
		rawWiID := paramWiID[0]
		if wiID, err2 := uuid.FromString(rawWiID); err2 == nil {
			rctx.WiID = wiID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("wiID", rawWiID, "uuid"))
		}
	}
	return &rctx, err
}

// createWorkItemCommentsPayload is the work_item_comments create action payload.
type createWorkItemCommentsPayload struct {
	Data *createComment `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createWorkItemCommentsPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates CreateWorkItemCommentsPayload from createWorkItemCommentsPayload
func (payload *createWorkItemCommentsPayload) Publicize() *CreateWorkItemCommentsPayload {
	var pub CreateWorkItemCommentsPayload
	if payload.Data != nil {
		pub.Data = payload.Data.Publicize()
	}
	if payload.Included != nil {
		pub.Included = payload.Included
	}
	return &pub
}

// CreateWorkItemCommentsPayload is the work_item_comments create action payload.
type CreateWorkItemCommentsPayload struct {
	Data *CreateComment `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{} `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateWorkItemCommentsPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *CreateWorkItemCommentsContext) OK(r *CommentSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateWorkItemCommentsContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateWorkItemCommentsContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateWorkItemCommentsContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateWorkItemCommentsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListWorkItemCommentsContext provides the work_item_comments list action context.
type ListWorkItemCommentsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince *string
	IfNoneMatch     *string
	PageLimit       *int
	PageOffset      *string
	WiID            uuid.UUID
}

// NewListWorkItemCommentsContext parses the incoming request URL and body, performs validations and creates the
// context used by the work_item_comments controller list action.
func NewListWorkItemCommentsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListWorkItemCommentsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListWorkItemCommentsContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	paramPageLimit := req.Params["page[limit]"]
	if len(paramPageLimit) > 0 {
		rawPageLimit := paramPageLimit[0]
		if pageLimit, err2 := strconv.Atoi(rawPageLimit); err2 == nil {
			tmp80 := pageLimit
			tmp79 := &tmp80
			rctx.PageLimit = tmp79
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page[limit]", rawPageLimit, "integer"))
		}
	}
	paramPageOffset := req.Params["page[offset]"]
	if len(paramPageOffset) > 0 {
		rawPageOffset := paramPageOffset[0]
		rctx.PageOffset = &rawPageOffset
	}
	paramWiID := req.Params["wiID"]
	if len(paramWiID) > 0 {
		rawWiID := paramWiID[0]
		if wiID, err2 := uuid.FromString(rawWiID); err2 == nil {
			rctx.WiID = wiID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("wiID", rawWiID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListWorkItemCommentsContext) OK(r *CommentList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ListWorkItemCommentsContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListWorkItemCommentsContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListWorkItemCommentsContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListWorkItemCommentsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// RelationsWorkItemCommentsContext provides the work_item_comments relations action context.
type RelationsWorkItemCommentsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince *string
	IfNoneMatch     *string
	PageLimit       *int
	PageOffset      *string
	WiID            uuid.UUID
}

// NewRelationsWorkItemCommentsContext parses the incoming request URL and body, performs validations and creates the
// context used by the work_item_comments controller relations action.
func NewRelationsWorkItemCommentsContext(ctx context.Context, r *http.Request, service *goa.Service) (*RelationsWorkItemCommentsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RelationsWorkItemCommentsContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	paramPageLimit := req.Params["page[limit]"]
	if len(paramPageLimit) > 0 {
		rawPageLimit := paramPageLimit[0]
		if pageLimit, err2 := strconv.Atoi(rawPageLimit); err2 == nil {
			tmp83 := pageLimit
			tmp82 := &tmp83
			rctx.PageLimit = tmp82
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page[limit]", rawPageLimit, "integer"))
		}
	}
	paramPageOffset := req.Params["page[offset]"]
	if len(paramPageOffset) > 0 {
		rawPageOffset := paramPageOffset[0]
		rctx.PageOffset = &rawPageOffset
	}
	paramWiID := req.Params["wiID"]
	if len(paramWiID) > 0 {
		rawWiID := paramWiID[0]
		if wiID, err2 := uuid.FromString(rawWiID); err2 == nil {
			rctx.WiID = wiID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("wiID", rawWiID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RelationsWorkItemCommentsContext) OK(r *CommentRelationshipList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *RelationsWorkItemCommentsContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *RelationsWorkItemCommentsContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *RelationsWorkItemCommentsContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *RelationsWorkItemCommentsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListWorkItemEventsContext provides the work_item_events list action context.
type ListWorkItemEventsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince *string
	IfNoneMatch     *string
	RevisionID      *uuid.UUID
	WiID            uuid.UUID
}

// NewListWorkItemEventsContext parses the incoming request URL and body, performs validations and creates the
// context used by the work_item_events controller list action.
func NewListWorkItemEventsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListWorkItemEventsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListWorkItemEventsContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	paramRevisionID := req.Params["revisionID"]
	if len(paramRevisionID) > 0 {
		rawRevisionID := paramRevisionID[0]
		if revisionID, err2 := uuid.FromString(rawRevisionID); err2 == nil {
			tmp85 := &revisionID
			rctx.RevisionID = tmp85
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("revisionID", rawRevisionID, "uuid"))
		}
	}
	paramWiID := req.Params["wiID"]
	if len(paramWiID) > 0 {
		rawWiID := paramWiID[0]
		if wiID, err2 := uuid.FromString(rawWiID); err2 == nil {
			rctx.WiID = wiID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("wiID", rawWiID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListWorkItemEventsContext) OK(r *EventList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ListWorkItemEventsContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListWorkItemEventsContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListWorkItemEventsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListWorkItemLabelsContext provides the work_item_labels list action context.
type ListWorkItemLabelsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince *string
	IfNoneMatch     *string
	WiID            uuid.UUID
}

// NewListWorkItemLabelsContext parses the incoming request URL and body, performs validations and creates the
// context used by the work_item_labels controller list action.
func NewListWorkItemLabelsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListWorkItemLabelsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListWorkItemLabelsContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	paramWiID := req.Params["wiID"]
	if len(paramWiID) > 0 {
		rawWiID := paramWiID[0]
		if wiID, err2 := uuid.FromString(rawWiID); err2 == nil {
			rctx.WiID = wiID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("wiID", rawWiID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListWorkItemLabelsContext) OK(r *LabelList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ListWorkItemLabelsContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListWorkItemLabelsContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListWorkItemLabelsContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListWorkItemLabelsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CreateWorkItemLinkContext provides the work_item_link create action context.
type CreateWorkItemLinkContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *CreateWorkItemLinkPayload
}

// NewCreateWorkItemLinkContext parses the incoming request URL and body, performs validations and creates the
// context used by the work_item_link controller create action.
func NewCreateWorkItemLinkContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateWorkItemLinkContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateWorkItemLinkContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateWorkItemLinkContext) Created(r *WorkItemLinkSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateWorkItemLinkContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateWorkItemLinkContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *CreateWorkItemLinkContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateWorkItemLinkContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *CreateWorkItemLinkContext) Conflict(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateWorkItemLinkContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DeleteWorkItemLinkContext provides the work_item_link delete action context.
type DeleteWorkItemLinkContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	LinkID uuid.UUID
}

// NewDeleteWorkItemLinkContext parses the incoming request URL and body, performs validations and creates the
// context used by the work_item_link controller delete action.
func NewDeleteWorkItemLinkContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteWorkItemLinkContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteWorkItemLinkContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramLinkID := req.Params["linkId"]
	if len(paramLinkID) > 0 {
		rawLinkID := paramLinkID[0]
		if linkID, err2 := uuid.FromString(rawLinkID); err2 == nil {
			rctx.LinkID = linkID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("linkId", rawLinkID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteWorkItemLinkContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteWorkItemLinkContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteWorkItemLinkContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *DeleteWorkItemLinkContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteWorkItemLinkContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteWorkItemLinkContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowWorkItemLinkContext provides the work_item_link show action context.
type ShowWorkItemLinkContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince *string
	IfNoneMatch     *string
	LinkID          uuid.UUID
}

// NewShowWorkItemLinkContext parses the incoming request URL and body, performs validations and creates the
// context used by the work_item_link controller show action.
func NewShowWorkItemLinkContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowWorkItemLinkContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowWorkItemLinkContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	paramLinkID := req.Params["linkId"]
	if len(paramLinkID) > 0 {
		rawLinkID := paramLinkID[0]
		if linkID, err2 := uuid.FromString(rawLinkID); err2 == nil {
			rctx.LinkID = linkID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("linkId", rawLinkID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowWorkItemLinkContext) OK(r *WorkItemLinkSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ShowWorkItemLinkContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowWorkItemLinkContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowWorkItemLinkContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowWorkItemLinkContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowWorkItemLinkTypeContext provides the work_item_link_type show action context.
type ShowWorkItemLinkTypeContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince *string
	IfNoneMatch     *string
	WiltID          uuid.UUID
}

// NewShowWorkItemLinkTypeContext parses the incoming request URL and body, performs validations and creates the
// context used by the work_item_link_type controller show action.
func NewShowWorkItemLinkTypeContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowWorkItemLinkTypeContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowWorkItemLinkTypeContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	paramWiltID := req.Params["wiltID"]
	if len(paramWiltID) > 0 {
		rawWiltID := paramWiltID[0]
		if wiltID, err2 := uuid.FromString(rawWiltID); err2 == nil {
			rctx.WiltID = wiltID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("wiltID", rawWiltID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowWorkItemLinkTypeContext) OK(r *WorkItemLinkTypeSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ShowWorkItemLinkTypeContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowWorkItemLinkTypeContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowWorkItemLinkTypeContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowWorkItemLinkTypeContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListWorkItemLinkTypesContext provides the work_item_link_types list action context.
type ListWorkItemLinkTypesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince *string
	IfNoneMatch     *string
	SpaceTemplateID uuid.UUID
}

// NewListWorkItemLinkTypesContext parses the incoming request URL and body, performs validations and creates the
// context used by the work_item_link_types controller list action.
func NewListWorkItemLinkTypesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListWorkItemLinkTypesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListWorkItemLinkTypesContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	paramSpaceTemplateID := req.Params["spaceTemplateID"]
	if len(paramSpaceTemplateID) > 0 {
		rawSpaceTemplateID := paramSpaceTemplateID[0]
		if spaceTemplateID, err2 := uuid.FromString(rawSpaceTemplateID); err2 == nil {
			rctx.SpaceTemplateID = spaceTemplateID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceTemplateID", rawSpaceTemplateID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListWorkItemLinkTypesContext) OK(r *WorkItemLinkTypeList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ListWorkItemLinkTypesContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListWorkItemLinkTypesContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListWorkItemLinkTypesContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListWorkItemLinkTypesContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListWorkItemRelationshipsLinksContext provides the work_item_relationships_links list action context.
type ListWorkItemRelationshipsLinksContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince *string
	IfNoneMatch     *string
	WiID            uuid.UUID
}

// NewListWorkItemRelationshipsLinksContext parses the incoming request URL and body, performs validations and creates the
// context used by the work_item_relationships_links controller list action.
func NewListWorkItemRelationshipsLinksContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListWorkItemRelationshipsLinksContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListWorkItemRelationshipsLinksContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	paramWiID := req.Params["wiID"]
	if len(paramWiID) > 0 {
		rawWiID := paramWiID[0]
		if wiID, err2 := uuid.FromString(rawWiID); err2 == nil {
			rctx.WiID = wiID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("wiID", rawWiID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListWorkItemRelationshipsLinksContext) OK(r *WorkItemLinkList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ListWorkItemRelationshipsLinksContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListWorkItemRelationshipsLinksContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListWorkItemRelationshipsLinksContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListWorkItemRelationshipsLinksContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowWorkItemTypeGroupContext provides the work_item_type_group show action context.
type ShowWorkItemTypeGroupContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	GroupID uuid.UUID
}

// NewShowWorkItemTypeGroupContext parses the incoming request URL and body, performs validations and creates the
// context used by the work_item_type_group controller show action.
func NewShowWorkItemTypeGroupContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowWorkItemTypeGroupContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowWorkItemTypeGroupContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramGroupID := req.Params["groupID"]
	if len(paramGroupID) > 0 {
		rawGroupID := paramGroupID[0]
		if groupID, err2 := uuid.FromString(rawGroupID); err2 == nil {
			rctx.GroupID = groupID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("groupID", rawGroupID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowWorkItemTypeGroupContext) OK(r *WorkItemTypeGroupSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowWorkItemTypeGroupContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowWorkItemTypeGroupContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListWorkItemTypeGroupsContext provides the work_item_type_groups list action context.
type ListWorkItemTypeGroupsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SpaceTemplateID uuid.UUID
}

// NewListWorkItemTypeGroupsContext parses the incoming request URL and body, performs validations and creates the
// context used by the work_item_type_groups controller list action.
func NewListWorkItemTypeGroupsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListWorkItemTypeGroupsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListWorkItemTypeGroupsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSpaceTemplateID := req.Params["spaceTemplateID"]
	if len(paramSpaceTemplateID) > 0 {
		rawSpaceTemplateID := paramSpaceTemplateID[0]
		if spaceTemplateID, err2 := uuid.FromString(rawSpaceTemplateID); err2 == nil {
			rctx.SpaceTemplateID = spaceTemplateID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceTemplateID", rawSpaceTemplateID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListWorkItemTypeGroupsContext) OK(r *WorkItemTypeGroupList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListWorkItemTypeGroupsContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListWorkItemTypeGroupsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DeleteWorkitemContext provides the workitem delete action context.
type DeleteWorkitemContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	WiID uuid.UUID
}

// NewDeleteWorkitemContext parses the incoming request URL and body, performs validations and creates the
// context used by the workitem controller delete action.
func NewDeleteWorkitemContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteWorkitemContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteWorkitemContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramWiID := req.Params["wiID"]
	if len(paramWiID) > 0 {
		rawWiID := paramWiID[0]
		if wiID, err2 := uuid.FromString(rawWiID); err2 == nil {
			rctx.WiID = wiID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("wiID", rawWiID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteWorkitemContext) OK(resp []byte) error {
	ctx.ResponseData.Header().Set("Content-Type", "text/plain")
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteWorkitemContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteWorkitemContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *DeleteWorkitemContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteWorkitemContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// MethodNotAllowed sends a HTTP response with status code 405.
func (ctx *DeleteWorkitemContext) MethodNotAllowed() error {
	ctx.ResponseData.WriteHeader(405)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteWorkitemContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListChildrenWorkitemContext provides the workitem list-children action context.
type ListChildrenWorkitemContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince *string
	IfNoneMatch     *string
	PageLimit       *int
	PageOffset      *string
	WiID            uuid.UUID
}

// NewListChildrenWorkitemContext parses the incoming request URL and body, performs validations and creates the
// context used by the workitem controller list-children action.
func NewListChildrenWorkitemContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListChildrenWorkitemContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListChildrenWorkitemContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	paramPageLimit := req.Params["page[limit]"]
	if len(paramPageLimit) > 0 {
		rawPageLimit := paramPageLimit[0]
		if pageLimit, err2 := strconv.Atoi(rawPageLimit); err2 == nil {
			tmp97 := pageLimit
			tmp96 := &tmp97
			rctx.PageLimit = tmp96
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page[limit]", rawPageLimit, "integer"))
		}
	}
	paramPageOffset := req.Params["page[offset]"]
	if len(paramPageOffset) > 0 {
		rawPageOffset := paramPageOffset[0]
		rctx.PageOffset = &rawPageOffset
	}
	paramWiID := req.Params["wiID"]
	if len(paramWiID) > 0 {
		rawWiID := paramWiID[0]
		if wiID, err2 := uuid.FromString(rawWiID); err2 == nil {
			rctx.WiID = wiID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("wiID", rawWiID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListChildrenWorkitemContext) OK(r *WorkItemList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ListChildrenWorkitemContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListChildrenWorkitemContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListChildrenWorkitemContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListChildrenWorkitemContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowWorkitemContext provides the workitem show action context.
type ShowWorkitemContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince *string
	IfNoneMatch     *string
	WiID            uuid.UUID
}

// NewShowWorkitemContext parses the incoming request URL and body, performs validations and creates the
// context used by the workitem controller show action.
func NewShowWorkitemContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowWorkitemContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowWorkitemContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	paramWiID := req.Params["wiID"]
	if len(paramWiID) > 0 {
		rawWiID := paramWiID[0]
		if wiID, err2 := uuid.FromString(rawWiID); err2 == nil {
			rctx.WiID = wiID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("wiID", rawWiID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowWorkitemContext) OK(r *WorkItemSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ShowWorkitemContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowWorkitemContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowWorkitemContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowWorkitemContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// UpdateWorkitemContext provides the workitem update action context.
type UpdateWorkitemContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	WiID    uuid.UUID
	Payload *UpdateWorkitemPayload
}

// NewUpdateWorkitemContext parses the incoming request URL and body, performs validations and creates the
// context used by the workitem controller update action.
func NewUpdateWorkitemContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateWorkitemContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateWorkitemContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramWiID := req.Params["wiID"]
	if len(paramWiID) > 0 {
		rawWiID := paramWiID[0]
		if wiID, err2 := uuid.FromString(rawWiID); err2 == nil {
			rctx.WiID = wiID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("wiID", rawWiID, "uuid"))
		}
	}
	return &rctx, err
}

// updateWorkitemPayload is the workitem update action payload.
type updateWorkitemPayload struct {
	Data *workItem `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// An array of mixed types
	Included []interface{}  `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *workItemLinks `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *updateWorkitemPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if payload.Links != nil {
		if err2 := payload.Links.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates UpdateWorkitemPayload from updateWorkitemPayload
func (payload *updateWorkitemPayload) Publicize() *UpdateWorkitemPayload {
	var pub UpdateWorkitemPayload
	if payload.Data != nil {
		pub.Data = payload.Data.Publicize()
	}
	if payload.Included != nil {
		pub.Included = payload.Included
	}
	if payload.Links != nil {
		pub.Links = payload.Links.Publicize()
	}
	return &pub
}

// UpdateWorkitemPayload is the workitem update action payload.
type UpdateWorkitemPayload struct {
	Data *WorkItem `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}  `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *WorkItemLinks `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *UpdateWorkitemPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if payload.Links != nil {
		if err2 := payload.Links.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateWorkitemContext) OK(r *WorkItemSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateWorkitemContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateWorkitemContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *UpdateWorkitemContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateWorkitemContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *UpdateWorkitemContext) Conflict(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateWorkitemContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// CreateWorkitemsContext provides the workitems create action context.
type CreateWorkitemsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SpaceID uuid.UUID
	Payload *CreateWorkitemsPayload
}

// NewCreateWorkitemsContext parses the incoming request URL and body, performs validations and creates the
// context used by the workitems controller create action.
func NewCreateWorkitemsContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateWorkitemsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateWorkitemsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// createWorkitemsPayload is the workitems create action payload.
type createWorkitemsPayload struct {
	Data *workItem `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// An array of mixed types
	Included []interface{}  `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *workItemLinks `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *createWorkitemsPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if payload.Links != nil {
		if err2 := payload.Links.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates CreateWorkitemsPayload from createWorkitemsPayload
func (payload *createWorkitemsPayload) Publicize() *CreateWorkitemsPayload {
	var pub CreateWorkitemsPayload
	if payload.Data != nil {
		pub.Data = payload.Data.Publicize()
	}
	if payload.Included != nil {
		pub.Included = payload.Included
	}
	if payload.Links != nil {
		pub.Links = payload.Links.Publicize()
	}
	return &pub
}

// CreateWorkitemsPayload is the workitems create action payload.
type CreateWorkitemsPayload struct {
	Data *WorkItem `form:"data" json:"data" xml:"data"`
	// An array of mixed types
	Included []interface{}  `form:"included,omitempty" json:"included,omitempty" xml:"included,omitempty"`
	Links    *WorkItemLinks `form:"links,omitempty" json:"links,omitempty" xml:"links,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *CreateWorkitemsPayload) Validate() (err error) {
	if payload.Data == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "data"))
	}
	if payload.Data != nil {
		if err2 := payload.Data.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if payload.Links != nil {
		if err2 := payload.Links.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Created sends a HTTP response with status code 201.
func (ctx *CreateWorkitemsContext) Created(r *WorkItemSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 201, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateWorkitemsContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateWorkitemsContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *CreateWorkitemsContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateWorkitemsContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateWorkitemsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListWorkitemsContext provides the workitems list action context.
type ListWorkitemsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince     *string
	IfNoneMatch         *string
	Filter              *string
	FilterArea          *string
	FilterAssignee      *string
	FilterExpression    *string
	FilterIteration     *string
	FilterParentexists  *bool
	FilterWorkitemstate *string
	FilterWorkitemtype  *uuid.UUID
	PageLimit           *int
	PageOffset          *string
	Sort                *string
	SpaceID             uuid.UUID
}

// NewListWorkitemsContext parses the incoming request URL and body, performs validations and creates the
// context used by the workitems controller list action.
func NewListWorkitemsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListWorkitemsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListWorkitemsContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	paramFilter := req.Params["filter"]
	if len(paramFilter) > 0 {
		rawFilter := paramFilter[0]
		rctx.Filter = &rawFilter
	}
	paramFilterArea := req.Params["filter[area]"]
	if len(paramFilterArea) > 0 {
		rawFilterArea := paramFilterArea[0]
		rctx.FilterArea = &rawFilterArea
	}
	paramFilterAssignee := req.Params["filter[assignee]"]
	if len(paramFilterAssignee) > 0 {
		rawFilterAssignee := paramFilterAssignee[0]
		rctx.FilterAssignee = &rawFilterAssignee
	}
	paramFilterExpression := req.Params["filter[expression]"]
	if len(paramFilterExpression) > 0 {
		rawFilterExpression := paramFilterExpression[0]
		rctx.FilterExpression = &rawFilterExpression
	}
	paramFilterIteration := req.Params["filter[iteration]"]
	if len(paramFilterIteration) > 0 {
		rawFilterIteration := paramFilterIteration[0]
		rctx.FilterIteration = &rawFilterIteration
	}
	paramFilterParentexists := req.Params["filter[parentexists]"]
	if len(paramFilterParentexists) > 0 {
		rawFilterParentexists := paramFilterParentexists[0]
		if filterParentexists, err2 := strconv.ParseBool(rawFilterParentexists); err2 == nil {
			tmp102 := &filterParentexists
			rctx.FilterParentexists = tmp102
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("filter[parentexists]", rawFilterParentexists, "boolean"))
		}
	}
	paramFilterWorkitemstate := req.Params["filter[workitemstate]"]
	if len(paramFilterWorkitemstate) > 0 {
		rawFilterWorkitemstate := paramFilterWorkitemstate[0]
		rctx.FilterWorkitemstate = &rawFilterWorkitemstate
	}
	paramFilterWorkitemtype := req.Params["filter[workitemtype]"]
	if len(paramFilterWorkitemtype) > 0 {
		rawFilterWorkitemtype := paramFilterWorkitemtype[0]
		if filterWorkitemtype, err2 := uuid.FromString(rawFilterWorkitemtype); err2 == nil {
			tmp103 := &filterWorkitemtype
			rctx.FilterWorkitemtype = tmp103
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("filter[workitemtype]", rawFilterWorkitemtype, "uuid"))
		}
	}
	paramPageLimit := req.Params["page[limit]"]
	if len(paramPageLimit) > 0 {
		rawPageLimit := paramPageLimit[0]
		if pageLimit, err2 := strconv.Atoi(rawPageLimit); err2 == nil {
			tmp105 := pageLimit
			tmp104 := &tmp105
			rctx.PageLimit = tmp104
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("page[limit]", rawPageLimit, "integer"))
		}
	}
	paramPageOffset := req.Params["page[offset]"]
	if len(paramPageOffset) > 0 {
		rawPageOffset := paramPageOffset[0]
		rctx.PageOffset = &rawPageOffset
	}
	paramSort := req.Params["sort"]
	if len(paramSort) > 0 {
		rawSort := paramSort[0]
		rctx.Sort = &rawSort
		if rctx.Sort != nil {
			if !(*rctx.Sort == "execution" || *rctx.Sort == "created" || *rctx.Sort == "updated" || *rctx.Sort == "-execution" || *rctx.Sort == "-created" || *rctx.Sort == "-updated") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError(`sort`, *rctx.Sort, []interface{}{"execution", "created", "updated", "-execution", "-created", "-updated"}))
			}
		}
	}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListWorkitemsContext) OK(r *WorkItemList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ListWorkitemsContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// TemporaryRedirect sends a HTTP response with status code 307.
func (ctx *ListWorkitemsContext) TemporaryRedirect() error {
	ctx.ResponseData.WriteHeader(307)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListWorkitemsContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListWorkitemsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ReorderWorkitemsContext provides the workitems reorder action context.
type ReorderWorkitemsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	SpaceID uuid.UUID
	Payload *ReorderWorkitemsPayload
}

// NewReorderWorkitemsContext parses the incoming request URL and body, performs validations and creates the
// context used by the workitems controller reorder action.
func NewReorderWorkitemsContext(ctx context.Context, r *http.Request, service *goa.Service) (*ReorderWorkitemsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ReorderWorkitemsContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramSpaceID := req.Params["spaceID"]
	if len(paramSpaceID) > 0 {
		rawSpaceID := paramSpaceID[0]
		if spaceID, err2 := uuid.FromString(rawSpaceID); err2 == nil {
			rctx.SpaceID = spaceID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceID", rawSpaceID, "uuid"))
		}
	}
	return &rctx, err
}

// reorderWorkitemsPayload is the workitems reorder action payload.
type reorderWorkitemsPayload struct {
	Data     []*workItem              `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Position *workItemReorderPosition `form:"position,omitempty" json:"position,omitempty" xml:"position,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *reorderWorkitemsPayload) Validate() (err error) {
	for _, e := range payload.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if payload.Position != nil {
		if err2 := payload.Position.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// Publicize creates ReorderWorkitemsPayload from reorderWorkitemsPayload
func (payload *reorderWorkitemsPayload) Publicize() *ReorderWorkitemsPayload {
	var pub ReorderWorkitemsPayload
	if payload.Data != nil {
		pub.Data = make([]*WorkItem, len(payload.Data))
		for i2, elem2 := range payload.Data {
			pub.Data[i2] = elem2.Publicize()
		}
	}
	if payload.Position != nil {
		pub.Position = payload.Position.Publicize()
	}
	return &pub
}

// ReorderWorkitemsPayload is the workitems reorder action payload.
type ReorderWorkitemsPayload struct {
	Data     []*WorkItem              `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Position *WorkItemReorderPosition `form:"position,omitempty" json:"position,omitempty" xml:"position,omitempty"`
}

// Validate runs the validation rules defined in the design.
func (payload *ReorderWorkitemsPayload) Validate() (err error) {
	for _, e := range payload.Data {
		if e != nil {
			if err2 := e.Validate(); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if payload.Position != nil {
		if err2 := payload.Position.Validate(); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *ReorderWorkitemsContext) OK(r *WorkItemReorder) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ReorderWorkitemsContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ReorderWorkitemsContext) Unauthorized(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *ReorderWorkitemsContext) Forbidden(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ReorderWorkitemsContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// Conflict sends a HTTP response with status code 409.
func (ctx *ReorderWorkitemsContext) Conflict(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 409, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ReorderWorkitemsContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ShowWorkitemtypeContext provides the workitemtype show action context.
type ShowWorkitemtypeContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince *string
	IfNoneMatch     *string
	WitID           uuid.UUID
}

// NewShowWorkitemtypeContext parses the incoming request URL and body, performs validations and creates the
// context used by the workitemtype controller show action.
func NewShowWorkitemtypeContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowWorkitemtypeContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowWorkitemtypeContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	paramWitID := req.Params["witID"]
	if len(paramWitID) > 0 {
		rawWitID := paramWitID[0]
		if witID, err2 := uuid.FromString(rawWitID); err2 == nil {
			rctx.WitID = witID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("witID", rawWitID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowWorkitemtypeContext) OK(r *WorkItemTypeSingle) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ShowWorkitemtypeContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ShowWorkitemtypeContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowWorkitemtypeContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowWorkitemtypeContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListWorkitemtypesContext provides the workitemtypes list action context.
type ListWorkitemtypesContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	IfModifiedSince *string
	IfNoneMatch     *string
	SpaceTemplateID uuid.UUID
}

// NewListWorkitemtypesContext parses the incoming request URL and body, performs validations and creates the
// context used by the workitemtypes controller list action.
func NewListWorkitemtypesContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListWorkitemtypesContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListWorkitemtypesContext{Context: ctx, ResponseData: resp, RequestData: req}
	headerIfModifiedSince := req.Header["If-Modified-Since"]
	if len(headerIfModifiedSince) > 0 {
		rawIfModifiedSince := headerIfModifiedSince[0]
		req.Params["If-Modified-Since"] = []string{rawIfModifiedSince}
		rctx.IfModifiedSince = &rawIfModifiedSince
	}
	headerIfNoneMatch := req.Header["If-None-Match"]
	if len(headerIfNoneMatch) > 0 {
		rawIfNoneMatch := headerIfNoneMatch[0]
		req.Params["If-None-Match"] = []string{rawIfNoneMatch}
		rctx.IfNoneMatch = &rawIfNoneMatch
	}
	paramSpaceTemplateID := req.Params["spaceTemplateID"]
	if len(paramSpaceTemplateID) > 0 {
		rawSpaceTemplateID := paramSpaceTemplateID[0]
		if spaceTemplateID, err2 := uuid.FromString(rawSpaceTemplateID); err2 == nil {
			rctx.SpaceTemplateID = spaceTemplateID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("spaceTemplateID", rawSpaceTemplateID, "uuid"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListWorkitemtypesContext) OK(r *WorkItemTypeList) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NotModified sends a HTTP response with status code 304.
func (ctx *ListWorkitemtypesContext) NotModified() error {
	ctx.ResponseData.WriteHeader(304)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListWorkitemtypesContext) BadRequest(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ListWorkitemtypesContext) NotFound(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 404, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListWorkitemtypesContext) InternalServerError(r *JSONAPIErrors) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.api+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}
